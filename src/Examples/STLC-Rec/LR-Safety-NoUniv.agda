module Examples.STLC-Rec.LR-Safety-NoUniv where

open import Examples.STLC-Rec.Definitions hiding (_,_)
open import Examples.STLC-Rec.SubjectReduction

open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Data.List using (List; []; _‚à∑_)
open import Data.List.Relation.Unary.Any using (here; there)
open import Data.Nat hiding (_‚äî_)
open import Data.Nat.Induction using (<-rec; <-wellFounded)
open import Data.Nat.Properties using (‚â§-trans; ‚â§-refl; ‚â§-step; ‚à∏-monoÀ°-‚â§; <‚áí‚â§; +-comm)
open import Data.Product using (Œ£; _√ó_; _,_; Œ£-syntax; ‚àÉ-syntax) renaming (proj‚ÇÅ to œÄ‚ÇÅ; proj‚ÇÇ to œÄ‚ÇÇ) 
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Unit.Polymorphic
open import Function using (_$_)
open import Induction
open import Induction.WellFounded as WF using (WfRec)
open import Level using (Level; _‚äî_)
open import Relation.Binary.PropositionalEquality hiding ([_])
open import Relation.Nullary using (¬¨_; Dec; yes; no)

-- Lemmas ----------------------------------------------------------------------

infixr 0 _by_
_by_ : ‚àÄ {‚Ñì} (A : Set ‚Ñì) ‚Üí A ‚Üí A
A by a = a

k‚à∏j‚â§k : ‚àÄ k j ‚Üí k ‚à∏ j ‚â§ k
k‚à∏j‚â§k k       zero    = ‚â§-refl
k‚à∏j‚â§k zero    (suc j) = ‚â§-refl
k‚à∏j‚â§k (suc k) (suc j) = ‚â§-trans (k‚à∏j‚â§k k j) (‚â§-step ‚â§-refl)

-- Formalization ---------------------------------------------------------------

Gas : Set
Gas = ‚Ñï

variable
  ‚Ñì ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ : Level
  A B C : Set ‚Ñì
  k k‚ÇÅ k‚ÇÇ k‚ÇÉ k' k‚ÇÅ' k‚ÇÇ' k‚ÇÉ' : Gas
  j j‚ÇÅ j‚ÇÇ j‚ÇÉ j' j‚ÇÅ' j‚ÇÇ' j‚ÇÉ' : Gas
  i i‚ÇÅ i‚ÇÇ i‚ÇÉ i' i‚ÇÅ' i‚ÇÇ' i‚ÇÉ' : Gas

data _‚Ü™^[_]_ : ¬µ ‚ä¢ ùïñ ‚Üí Gas ‚Üí ¬µ ‚ä¢ ùïñ ‚Üí Set where
  ‚Ü™-refl : e ‚Ü™^[ k ] e
  ‚Ü™-step : e‚ÇÅ ‚Ü™ e‚ÇÇ ‚Üí e‚ÇÇ ‚Ü™^[ k ] e‚ÇÉ ‚Üí e‚ÇÅ ‚Ü™^[ suc k ] e‚ÇÉ

lift-‚Ü™^' : e‚ÇÅ ‚Ü™^[ k ] e‚ÇÇ ‚Üí e‚ÇÅ ‚Ü™^[ k + k' ] e‚ÇÇ
lift-‚Ü™^' ‚Ü™-refl = ‚Ü™-refl
lift-‚Ü™^' (‚Ü™-step e‚ÇÅ‚Ü™e‚ÇÇ e‚ÇÇ‚Ü™^[k]e‚ÇÉ) = ‚Ü™-step e‚ÇÅ‚Ü™e‚ÇÇ (lift-‚Ü™^' e‚ÇÇ‚Ü™^[k]e‚ÇÉ)

lift-‚Ü™^ : ‚àÄ {k k'} ‚Üí e‚ÇÅ ‚Ü™^[ k ] e‚ÇÇ ‚Üí e‚ÇÅ ‚Ü™^[ k' + k ] e‚ÇÇ
lift-‚Ü™^ {_} {e‚ÇÅ} {e‚ÇÇ} {k} {k'} p = subst (e‚ÇÅ ‚Ü™^[_] e‚ÇÇ) (+-comm k k') (lift-‚Ü™^' p)

‚Ü™^-trans : e‚ÇÅ ‚Ü™^[ k ] e‚ÇÇ ‚Üí e‚ÇÇ ‚Ü™^[ k' ] e‚ÇÉ ‚Üí e‚ÇÅ ‚Ü™^[ k + k' ] e‚ÇÉ
‚Ü™^-trans ‚Ü™-refl q = lift-‚Ü™^ q
‚Ü™^-trans (‚Ü™-step s p) q = ‚Ü™-step s (‚Ü™^-trans p q)

-- ‚Ü™^‚Üí‚Ü™* : e‚ÇÅ ‚Ü™^[ k ] e‚ÇÇ ‚Üí e‚ÇÅ ‚Ü™* e‚ÇÇ
-- ‚Ü™^‚Üí‚Ü™* p = ?

-- ‚Ü™*‚Üí‚Ü™^ : e‚ÇÅ ‚Ü™* e‚ÇÇ ‚Üí ‚àÉ[ k ] (e‚ÇÅ ‚Ü™^[ k ] e‚ÇÇ)
-- ‚Ü™*‚Üí‚Ü™^ p = {!!}

Red : ¬µ ‚ä¢ ùïñ ‚Üí Set
Red e = ‚àÉ[ e' ] (e ‚Ü™ e')

Irred : ¬µ ‚ä¢ ùïñ ‚Üí Set
Irred e = ¬¨ Red e

-- _‚ààùïç_‚ü¶_‚üß _‚ààùîº_‚ü¶_‚üß : [] ‚ä¢ ùïñ ‚Üí Gas ‚Üí [] ‚à∂‚ä¢ ùïñ ‚Üí Set

-- -- (Œªx e) ‚ààùïç k ‚ü¶ t‚ÇÅ ‚áí t‚ÇÇ ‚üß = ‚àÄ {j v} ‚Üí
-- --                               v           ‚ààùïç k ‚ü¶ t‚ÇÅ ‚üß ‚Üí
-- --                               (e ‚ãØ ‚¶Ö v ‚¶Ü) ‚ààùîº k ‚ü¶ t‚ÇÇ ‚üß
-- -- _      ‚ààùïç k ‚ü¶ t‚ÇÅ ‚áí t‚ÇÇ ‚üß = ‚ä•
-- -- fold v ‚ààùïç suc k ‚ü¶ ¬µŒ± t    ‚üß = v ‚ààùïç k ‚ü¶ t ‚ãØ ‚¶Ö ¬µŒ± t ‚¶Ü ‚üß
-- -- fold v ‚ààùïç zero ‚ü¶ ¬µŒ± t    ‚üß = ‚ä•
-- -- _      ‚ààùïç k ‚ü¶ ¬µŒ± t    ‚üß = ‚ä•
-- -- _      ‚ààùïç k ‚ü¶ ùüò       ‚üß = ‚ä•

-- v ‚ààùïç k ‚ü¶ t ‚üß with k
-- ... | zero = ‚ä•
-- ... | suc k with t | v
-- ...   | (t‚ÇÅ ‚áí t‚ÇÇ) | (Œªx e)   = ‚àÄ {v} ‚Üí v ‚ààùïç suc k ‚ü¶ t‚ÇÅ ‚üß ‚Üí (e ‚ãØ ‚¶Ö v ‚¶Ü) ‚ààùîº suc k ‚ü¶ t‚ÇÇ ‚üß
-- ...   | (t‚ÇÅ ‚áí t‚ÇÇ) | _        = ‚ä•
-- ...   | (¬µŒ± t)    | (fold v) = v ‚ààùïç k ‚ü¶ t ‚ãØ ‚¶Ö ¬µŒ± t ‚¶Ü ‚üß
-- ...   | (¬µŒ± t)    | _        = ‚ä• 
-- ...   | ùüò         | _        = ‚ä•

-- e ‚ààùîº k ‚ü¶ t ‚üß = ‚àÄ {j e'} ‚Üí
--   (j<k : j < k) ‚Üí
--   e ‚Ü™^[ j ] e' ‚Üí
--   Irred e' ‚Üí
--   e' ‚ààùïç k ‚à∏ j ‚ü¶ t ‚üß





-- _‚ààùïç_‚ü¶_‚üß _‚ààùîº_‚ü¶_‚üß : [] ‚ä¢ ùïñ ‚Üí Gas ‚Üí [] ‚à∂‚ä¢ ùïñ ‚Üí Set

-- (Œªx e) ‚ààùïç k     ‚ü¶ t‚ÇÅ ‚áí t‚ÇÇ ‚üß = ‚àÄ {v} ‚Üí
--                                   v           ‚ààùïç k ‚ü¶ t‚ÇÅ ‚üß ‚Üí
--                                   (e ‚ãØ ‚¶Ö v ‚¶Ü) ‚ààùîº k ‚ü¶ t‚ÇÇ ‚üß
-- _      ‚ààùïç k     ‚ü¶ t‚ÇÅ ‚áí t‚ÇÇ ‚üß = ‚ä•
-- fold v ‚ààùïç suc k ‚ü¶ ¬µŒ± t    ‚üß = v ‚ààùïç k ‚ü¶ t ‚ãØ ‚¶Ö ¬µŒ± t ‚¶Ü ‚üß
-- fold v ‚ààùïç zero  ‚ü¶ ¬µŒ± t    ‚üß = ‚ä•
-- _      ‚ààùïç k     ‚ü¶ ¬µŒ± t    ‚üß = ‚ä•
-- _      ‚ààùïç k     ‚ü¶ ùüò       ‚üß = ‚ä•

-- e ‚ààùîº zero  ‚ü¶ t ‚üß = ‚ä•
-- e ‚ààùîº suc k ‚ü¶ t ‚üß = ‚àÄ {e'} ‚Üí
--   e ‚Ü™^[ k ] e' ‚Üí
--   Irred e' ‚Üí
--   e' ‚ààùïç k ‚ü¶ t ‚üß






_‚ààùïç_‚ü¶_‚üß _‚ààùîº_‚ü¶_‚üß : [] ‚ä¢ ùïñ ‚Üí Gas ‚Üí [] ‚à∂‚ä¢ ùïñ ‚Üí Set

(Œªx e) ‚ààùïç k ‚ü¶ t‚ÇÅ ‚áí t‚ÇÇ ‚üß = ‚àÄ {j v} ‚Üí
                              (j‚â§k : j ‚â§ k) ‚Üí
                              v           ‚ààùïç j ‚ü¶ t‚ÇÅ ‚üß ‚Üí
                              (e ‚ãØ ‚¶Ö v ‚¶Ü) ‚ààùîº j ‚ü¶ t‚ÇÇ ‚üß
_      ‚ààùïç k ‚ü¶ t‚ÇÅ ‚áí t‚ÇÇ ‚üß = ‚ä•
fold v ‚ààùïç k ‚ü¶ ¬µŒ± t    ‚üß = ‚àÄ {j} ‚Üí
                              (j<k : j < k) ‚Üí
                              v ‚ààùïç j ‚ü¶ t ‚ãØ ‚¶Ö ¬µŒ± t ‚¶Ü ‚üß
_      ‚ààùïç k ‚ü¶ ¬µŒ± t    ‚üß = ‚ä•
_      ‚ààùïç k ‚ü¶ ùüò       ‚üß = ‚ä•

e ‚ààùîº k ‚ü¶ t ‚üß = ‚àÄ {j e'} ‚Üí
  (j<k : j < k) ‚Üí
  e ‚Ü™^[ j ] e' ‚Üí
  Irred e' ‚Üí
  e' ‚ààùïç k ‚à∏ j ‚ü¶ t ‚üß


-- -- Recursive Definitions -------------------------------------------------------

-- module Rec where

--   -- Type of the `_‚ààùïç_‚ü¶_‚üß` and `_‚ààùîº_‚ü¶_‚üß` relations, but without the `Gas`-parameter.
--   RelTy : Set‚ÇÅ
--   RelTy = [] ‚ä¢ ùïñ ‚Üí [] ‚à∂‚ä¢ ùïñ ‚Üí Set


--   -- Field accessors for the Rùïç and Rùîº components of the induction hypothesis.
--   Rùïç< : ‚àÄ {k} ‚Üí (‚àÄ j ‚Üí j < k ‚Üí A √ó B) ‚Üí (‚àÄ j ‚Üí j < k ‚Üí A)
--   Rùïç< ih j j<k = œÄ‚ÇÅ (ih j j<k)
--   Rùîº< : ‚àÄ {k} ‚Üí (‚àÄ j ‚Üí j < k ‚Üí A √ó B) ‚Üí (‚àÄ j ‚Üí j < k ‚Üí B)
--   Rùîº< ih j j<k = œÄ‚ÇÇ (ih j j<k)

--   Rùïç Rùîº : ‚àÄ (k : Gas) ‚Üí (‚àÄ j ‚Üí j < k ‚Üí RelTy √ó RelTy) ‚Üí RelTy
--   Rùïç k ih _        (`[ p ] x) = ‚ä•
--   Rùïç k ih (Œªx e)   (t‚ÇÅ ‚áí t‚ÇÇ)  = ‚àÄ {j v} ‚Üí
--                               (j‚â§k : j ‚â§ k) ‚Üí
--                               Rùïç j (wk-ih j‚â§k ih) v t‚ÇÅ ‚Üí
--                               Rùîº j (wk-ih j‚â§k ih) (e ‚ãØ ‚¶Ö v ‚¶Ü) t‚ÇÇ
--   Rùïç k ih _        (t‚ÇÅ ‚áí t‚ÇÇ)  = ‚ä•
--   Rùïç k ih _        ùüò          = ‚ä•
--   Rùïç k ih (fold v) (¬µŒ± t)     = ‚àÄ {j} ‚Üí
--                               (j<k : j < k) ‚Üí
--                               Rùïç< ih j j<k v (t ‚ãØ ‚¶Ö ¬µŒ± t ‚¶Ü)
--   Rùïç k ih _        (¬µŒ± t)     = ‚ä•
--   Rùîº k ih e        t          = ‚àÄ {j e'} ‚Üí
--                               (j<k : j < k) ‚Üí
--                               e ‚Ü™^[ j ] e' ‚Üí
--                               Irred e' ‚Üí
--                               Rùïç (k ‚à∏ j) (wk-ih (k‚à∏j‚â§k k j) ih) e' t

--   R : ‚àÄ (k : Gas) ‚Üí
--     (‚àÄ j ‚Üí j < k ‚Üí RelTy √ó RelTy) ‚Üí
--     RelTy √ó RelTy
--   R k ih = Rùïç k ih , Rùîº k ih

--   infix 3 _‚ààùïç_‚ü¶_‚üß  _‚ààùîº_‚ü¶_‚üß  _‚ààùîæ_‚ü¶_‚üß  _‚äß_‚à∂_

--   ‚ààùïçùîº : Gas ‚Üí RelTy √ó RelTy
--   ‚ààùïçùîº = <-rec _ R

--   _‚ààùïç_‚ü¶_‚üß _‚ààùîº_‚ü¶_‚üß : [] ‚ä¢ ùïñ ‚Üí Gas ‚Üí [] ‚à∂‚ä¢ ùïñ ‚Üí Set
--   v ‚ààùïç k ‚ü¶ t ‚üß = œÄ‚ÇÅ (‚ààùïçùîº k) v t
--   e ‚ààùîº k ‚ü¶ t ‚üß = œÄ‚ÇÇ (‚ààùïçùîº k) e t

--   _‚ààùîæ_‚ü¶_‚üß : ‚àÄ {¬µ} ‚Üí ¬µ ‚Üí‚Çõ [] ‚Üí Gas ‚Üí Ctx ¬µ ‚Üí Set
--   _‚ààùîæ_‚ü¶_‚üß {¬µ = ¬µ} œÉ k Œì = (x : ¬µ ‚àã ùïñ) ‚Üí œÉ ùïñ x ‚ààùïç k ‚ü¶ wk-telescope Œì x ‚ãØ œÉ ‚üß 

--   -- TODO: it's probably easier to transport the next two lemmas from
--   -- the inductive def or vice versa.

--   []ùîæ : id‚Çõ ‚ààùîæ k ‚ü¶ ‚àÖ ‚üß
--   []ùîæ ()

--   _‚à∑ùîæ_ : {œÉ : ¬µ‚ÇÅ ‚Üí‚Çõ []} {k : Gas} {Œì : Ctx ¬µ‚ÇÅ} {v : [] ‚ä¢ ùïñ} {t : ¬µ‚ÇÅ ‚ä¢ ùï•} ‚Üí
--     v        ‚ààùïç k ‚ü¶ t ‚ãØ œÉ  ‚üß ‚Üí
--     œÉ        ‚ààùîæ k ‚ü¶ Œì      ‚üß ‚Üí
--     (œÉ ,‚Çõ v) ‚ààùîæ k ‚ü¶ Œì ,, t ‚üß
--   _‚à∑ùîæ_ {¬µ‚ÇÅ} {œÉ} {k} {Œì} {v} {t} v‚ààùïç œÉ‚ààùîæ (here refl) =
--       (œÉ ,‚Çõ v) ùïñ (here refl) ‚ààùïç k ‚ü¶ wk-telescope (Œì ,, t) (here refl) ‚ãØ (œÉ ,‚Çõ v) ‚üß
--     by (
--       v ‚ààùïç k ‚ü¶ t ‚ãØ wk ‚ãØ (œÉ ,‚Çõ v) ‚üß
--     by subst (Œª ‚ñ† ‚Üí v ‚ààùïç k ‚ü¶ ‚ñ† ‚üß) (sym (wk-cancels-,‚Çõ t œÉ v)) (
--       v ‚ààùïç k ‚ü¶ t ‚ãØ œÉ ‚üß
--     by v‚ààùïç))
--   _‚à∑ùîæ_ {¬µ‚ÇÅ} {œÉ} {k} {Œì} {v} {t} v‚ààùïç œÉ‚ààùîæ (there x) =
--       œÉ ùïñ x ‚ààùïç k ‚ü¶ wk-telescope (Œì ,, t) (there x) ‚ãØ (œÉ ,‚Çõ v) ‚üß
--     by (
--       œÉ ùïñ x ‚ààùïç k ‚ü¶ wk-telescope Œì x ‚ãØ wk ‚ãØ (œÉ ,‚Çõ v) ‚üß
--     by subst (Œª ‚ñ† ‚Üí œÉ ùïñ x ‚ààùïç k ‚ü¶ ‚ñ† ‚üß) (sym (wk-cancels-,‚Çõ (wk-telescope Œì x) œÉ v)) (
--       œÉ ùïñ x ‚ààùïç k ‚ü¶ wk-telescope Œì x ‚ãØ œÉ ‚üß
--     by œÉ‚ààùîæ x))

--   _‚äß_‚à∂_ : Ctx ¬µ ‚Üí ¬µ ‚ä¢ ùïñ ‚Üí ¬µ ‚à∂‚ä¢ ùïñ ‚Üí Set
--   Œì ‚äß e ‚à∂ t = ‚àÄ {k œÉ} ‚Üí
--     œÉ       ‚ààùîæ k ‚ü¶ Œì ‚üß ‚Üí
--     (e ‚ãØ œÉ) ‚ààùîº k ‚ü¶ t ‚ãØ œÉ ‚üß

--   module Unfold-ùïç-ùîº where

--     open import Induction.WellFounded using (module FixPoint)
--     open import Data.Nat.Induction using (<-wellFounded; <-rec)

--     open FixPoint-FunExt <-wellFounded (Œª _ ‚Üí RelTy √ó RelTy) R
--       renaming (unfold-wfRec to unfold-‚ààùïçùîº'-‚â°) public

--     unfold-‚ààùïçùîº-‚â° : {k : Gas} ‚Üí ‚ààùïçùîº k ‚â° R k (Œª j j<k ‚Üí ‚ààùïçùîº j)
--     unfold-‚ààùïçùîº-‚â° = unfold-‚ààùïçùîº'-‚â°

--     unfold-‚ààùïç'-‚â° : ‚àÄ {k : Gas} ‚Üí œÄ‚ÇÅ (‚ààùïçùîº k) ‚â° œÄ‚ÇÅ (R k (Œª j j<k ‚Üí ‚ààùïçùîº j))
--     unfold-‚ààùïç'-‚â° = cong œÄ‚ÇÅ unfold-‚ààùïçùîº-‚â°

--     unfold-‚ààùïç-‚â° : ‚àÄ {k : Gas} {e : [] ‚ä¢ ùïñ} {t : [] ‚ä¢ ùï•} ‚Üí
--       (e ‚ààùïç k ‚ü¶ t ‚üß) ‚â° Rùïç k (Œª j j<k ‚Üí ‚ààùïçùîº j) e t
--     unfold-‚ààùïç-‚â° {k = k} rewrite unfold-‚ààùïç'-‚â° {k} = refl

--     fold-‚ààùïç : ‚àÄ {k : Gas} {e : [] ‚ä¢ ùïñ} {t : [] ‚ä¢ ùï•} ‚Üí
--       Rùïç k (Œª j j<k ‚Üí ‚ààùïçùîº j) e t ‚Üí (e ‚ààùïç k ‚ü¶ t ‚üß)
--     fold-‚ààùïç p = subst (Œª x ‚Üí x) (sym unfold-‚ààùïç-‚â°) p

--     unfold-‚ààùïç : ‚àÄ {k : Gas} {e : [] ‚ä¢ ùïñ} {t : [] ‚ä¢ ùï•} ‚Üí
--       (e ‚ààùïç k ‚ü¶ t ‚üß) ‚Üí Rùïç k (Œª j j<k ‚Üí ‚ààùïçùîº j) e t
--     unfold-‚ààùïç p = subst (Œª x ‚Üí x) unfold-‚ààùïç-‚â° p

--     unfold-‚ààùîº'-‚â° : ‚àÄ {k : Gas} ‚Üí œÄ‚ÇÇ (‚ààùïçùîº k) ‚â° œÄ‚ÇÇ (R k (Œª j j<k ‚Üí ‚ààùïçùîº j))
--     unfold-‚ààùîº'-‚â° = cong œÄ‚ÇÇ unfold-‚ààùïçùîº-‚â°

--     unfold-‚ààùîº-‚â° : ‚àÄ {k : Gas} {e : [] ‚ä¢ ùïñ} {t : [] ‚ä¢ ùï•} ‚Üí
--       (e ‚ààùîº k ‚ü¶ t ‚üß) ‚â° Rùîº k (Œª j j<k ‚Üí ‚ààùïçùîº j) e t
--     -- unfold-ùîº {k = k} rewrite unfold-ùîº'-‚â° {k} = {!refl!}
--     unfold-‚ààùîº-‚â° {k = k} = {!!}

--     fold-‚ààùîº : ‚àÄ {k : Gas} {e : [] ‚ä¢ ùïñ} {t : [] ‚ä¢ ùï•} ‚Üí
--       Rùîº k (Œª j j<k ‚Üí ‚ààùïçùîº j) e t ‚Üí (e ‚ààùîº k ‚ü¶ t ‚üß)
--     fold-‚ààùîº p = subst (Œª x ‚Üí x) (sym unfold-‚ààùîº-‚â°) p

--     unfold-‚ààùîº : ‚àÄ {k : Gas} {e : [] ‚ä¢ ùïñ} {t : [] ‚ä¢ ùï•} ‚Üí
--       (e ‚ààùîº k ‚ü¶ t ‚üß) ‚Üí Rùîº k (Œª j j<k ‚Üí ‚ààùïçùîº j) e t
--     unfold-‚ààùîº p = subst (Œª x ‚Üí x) unfold-‚ààùîº-‚â° p

--   open Unfold-ùïç-ùîº public

-- --------------------------------------------------------------------------------

-- module Ind where

--   infix 3 _‚ààùïç_‚ü¶_‚üß  _‚ààùîº_‚ü¶_‚üß  _‚ààùîæ_‚ü¶_‚üß  _‚äß_‚à∂_

--   open Rec using () renaming
--     ( _‚ààùïç_‚ü¶_‚üß to _‚ààùïç_‚ü¶_‚üß·µ£
--     ; _‚ààùîº_‚ü¶_‚üß to _‚ààùîº_‚ü¶_‚üß·µ£
--     ; _‚ààùîæ_‚ü¶_‚üß to _‚ààùîæ_‚ü¶_‚üß·µ£
--     ; _‚äß_‚à∂_ to _‚äß·µ£_‚à∂_
--     )
--   mutual
--     data _‚ààùïç_‚ü¶_‚üß : [] ‚ä¢ ùïñ ‚Üí Gas ‚Üí [] ‚à∂‚ä¢ ùïñ ‚Üí Set where
--       ùïç-‚áí : ‚àÄ {k} ‚Üí
--         (‚àÄ {j v} ‚Üí (j‚â§k : j ‚â§ k) ‚Üí
--           v           ‚ààùïç j ‚ü¶ t‚ÇÅ ‚üß·µ£ ‚Üí
--           (e ‚ãØ ‚¶Ö v ‚¶Ü) ‚ààùîº j ‚ü¶ t‚ÇÇ ‚üß) ‚Üí
--         (Œªx e) ‚ààùïç k ‚ü¶ t‚ÇÅ ‚áí t‚ÇÇ ‚üß
--       ùïç-¬µ : ‚àÄ {k} ‚Üí
--         (‚àÄ {j} (j<k : j < k) ‚Üí
--           v ‚ààùïç j ‚ü¶ t ‚ãØ ‚¶Ö ¬µŒ± t ‚¶Ü ‚üß) ‚Üí
--         (fold v) ‚ààùïç k ‚ü¶ ¬µŒ± t ‚üß

--     data _‚ààùîº_‚ü¶_‚üß : [] ‚ä¢ ùïñ ‚Üí Gas ‚Üí [] ‚à∂‚ä¢ ùïñ ‚Üí Set where
--       ùîº : ‚àÄ {k} ‚Üí
--         (‚àÄ {j e'} ‚Üí (j<k : j < k) ‚Üí
--           e ‚Ü™^[ j ] e' ‚Üí
--           Irred e' ‚Üí
--           e' ‚ààùïç (k ‚à∏ j) ‚ü¶ t ‚üß) ‚Üí
--         e ‚ààùîº k ‚ü¶ t ‚üß

--   unwrap-ùîº : e ‚ààùîº k ‚ü¶ t ‚üß ‚Üí (‚àÄ {j e'} ‚Üí (j<k : j < k) ‚Üí
--         e ‚Ü™^[ j ] e' ‚Üí
--         Irred e' ‚Üí
--         e' ‚ààùïç (k ‚à∏ j) ‚ü¶ t ‚üß)
--   unwrap-ùîº (ùîº e) = e

--   _‚ààùîæ_‚ü¶_‚üß : ‚àÄ {¬µ} ‚Üí ¬µ ‚Üí‚Çõ [] ‚Üí Gas ‚Üí Ctx ¬µ ‚Üí Set
--   _‚ààùîæ_‚ü¶_‚üß {¬µ = ¬µ} œÉ k Œì = (x : ¬µ ‚àã ùïñ) ‚Üí œÉ ùïñ x ‚ààùïç k ‚ü¶ wk-telescope Œì x ‚ãØ œÉ ‚üß 

--   []ùîæ : id‚Çõ ‚ààùîæ k ‚ü¶ ‚àÖ ‚üß
--   []ùîæ ()

--   _‚à∑ùîæ_ : {œÉ : ¬µ‚ÇÅ ‚Üí‚Çõ []} {k : Gas} {Œì : Ctx ¬µ‚ÇÅ} {v : [] ‚ä¢ ùïñ} {t : ¬µ‚ÇÅ ‚ä¢ ùï•} ‚Üí
--     v        ‚ààùïç k ‚ü¶ t ‚ãØ œÉ  ‚üß ‚Üí
--     œÉ        ‚ààùîæ k ‚ü¶ Œì      ‚üß ‚Üí
--     (œÉ ,‚Çõ v) ‚ààùîæ k ‚ü¶ Œì ,, t ‚üß
--   _‚à∑ùîæ_ {¬µ‚ÇÅ} {œÉ} {k} {Œì} {v} {t} v‚ààùïç œÉ‚ààùîæ (here refl) =
--       (œÉ ,‚Çõ v) ùïñ (here refl) ‚ààùïç k ‚ü¶ wk-telescope (Œì ,, t) (here refl) ‚ãØ (œÉ ,‚Çõ v) ‚üß
--     by (
--       v ‚ààùïç k ‚ü¶ t ‚ãØ wk ‚ãØ (œÉ ,‚Çõ v) ‚üß
--     by subst (Œª ‚ñ† ‚Üí v ‚ààùïç k ‚ü¶ ‚ñ† ‚üß) (sym (wk-cancels-,‚Çõ t œÉ v)) (
--       v ‚ààùïç k ‚ü¶ t ‚ãØ œÉ ‚üß
--     by v‚ààùïç))
--   _‚à∑ùîæ_ {¬µ‚ÇÅ} {œÉ} {k} {Œì} {v} {t} v‚ààùïç œÉ‚ààùîæ (there x) =
--       œÉ ùïñ x ‚ààùïç k ‚ü¶ wk-telescope (Œì ,, t) (there x) ‚ãØ (œÉ ,‚Çõ v) ‚üß
--     by (
--       œÉ ùïñ x ‚ààùïç k ‚ü¶ wk-telescope Œì x ‚ãØ wk ‚ãØ (œÉ ,‚Çõ v) ‚üß
--     by subst (Œª ‚ñ† ‚Üí œÉ ùïñ x ‚ààùïç k ‚ü¶ ‚ñ† ‚üß) (sym (wk-cancels-,‚Çõ (wk-telescope Œì x) œÉ v)) (
--       œÉ ùïñ x ‚ààùïç k ‚ü¶ wk-telescope Œì x ‚ãØ œÉ ‚üß
--     by œÉ‚ààùîæ x))

--   _‚äß_‚à∂_ : Ctx ¬µ ‚Üí ¬µ ‚ä¢ ùïñ ‚Üí ¬µ ‚à∂‚ä¢ ùïñ ‚Üí Set
--   Œì ‚äß e ‚à∂ t = ‚àÄ {k œÉ} ‚Üí
--     œÉ       ‚ààùîæ k ‚ü¶ Œì ‚üß ‚Üí
--     (e ‚ãØ œÉ) ‚ààùîº k ‚ü¶ t ‚ãØ œÉ ‚üß


-- module Rec‚ÜíInd where
--   open Ind
--   open Rec using () renaming
--     ( _‚ààùïç_‚ü¶_‚üß to _‚ààùïç_‚ü¶_‚üß·µ£
--     ; _‚ààùîº_‚ü¶_‚üß to _‚ààùîº_‚ü¶_‚üß·µ£
--     ; _‚ààùîæ_‚ü¶_‚üß to _‚ààùîæ_‚ü¶_‚üß·µ£
--     ; _‚äß_‚à∂_ to _‚äß·µ£_‚à∂_
--     ; []ùîæ to []ùîæ·µ£
--     ; _‚à∑ùîæ_ to _‚à∑ùîæ·µ£_
--     )

--   RelTy : ‚Ñï ‚Üí Set _
--   RelTy k = (‚àÄ {e t} ‚Üí e ‚ààùïç k ‚ü¶ t ‚üß·µ£ ‚Üí e ‚ààùïç k ‚ü¶ t ‚üß)
--           √ó (‚àÄ {e t} ‚Üí e ‚ààùîº k ‚ü¶ t ‚üß·µ£ ‚Üí e ‚ààùîº k ‚ü¶ t ‚üß)

--   mutual
--     ùïç-R‚ÜíI : ‚àÄ k ‚Üí (‚àÄ j ‚Üí j < k ‚Üí RelTy j) ‚Üí (‚àÄ {e t} ‚Üí e ‚ààùïç k ‚ü¶ t ‚üß·µ£ ‚Üí e ‚ààùïç k ‚ü¶ t ‚üß)
--     ùïç-R‚ÜíI k ih {Œªx e}   {t‚ÇÅ ‚áí t‚ÇÇ} Œªxe‚ààùïç = ùïç-‚áí Œª {j} {v} j‚â§k v‚ààùïç·µ£ ‚Üí ùîº-R‚ÜíI j (wk-ih j‚â§k ih) (
--         e ‚ãØ ‚¶Ö v ‚¶Ü ‚ààùîº j ‚ü¶ t‚ÇÇ ‚üß·µ£
--       by let Œªxe‚ààùïç' = Rec.unfold-‚ààùïç {k = k} {e = Œªx e} {t = t‚ÇÅ ‚áí t‚ÇÇ} Œªxe‚ààùïç in
--           Rec.fold-‚ààùîº (Œªxe‚ààùïç' j‚â§k (Rec.unfold-‚ààùïç v‚ààùïç·µ£)))
--     ùïç-R‚ÜíI k ih {fold e} {¬µŒ± t}    fold-e‚ààùïç =
--       let fold-e‚ààùïç' = Rec.unfold-‚ààùïç {k = k} {e = fold e} {t = ¬µŒ± t} fold-e‚ààùïç in
--       ùïç-¬µ Œª {j} j<k ‚Üí œÄ‚ÇÅ (ih j j<k) (fold-e‚ààùïç' j<k)

--     ùîº-R‚ÜíI : ‚àÄ k ‚Üí (‚àÄ j ‚Üí j < k ‚Üí RelTy j) ‚Üí (‚àÄ {e t} ‚Üí e ‚ààùîº k ‚ü¶ t ‚üß·µ£ ‚Üí e ‚ààùîº k ‚ü¶ t ‚üß)
--     ùîº-R‚ÜíI k ih {e} {t} e‚ààùîº = ùîº (Œª {j} {e'} j<k e‚Üíe' irred-e' ‚Üí ùïç-R‚ÜíI (k ‚à∏ j) (wk-ih (k‚à∏j‚â§k k j) ih)
--       (Rec.fold-‚ààùïç (Rec.unfold-‚ààùîº {k = k} {e = e} {t = t} e‚ààùîº j<k e‚Üíe' irred-e')))

--   R‚ÜíI : ‚àÄ k ‚Üí RelTy k
--   R‚ÜíI = <-rec _ Œª k ih ‚Üí ùïç-R‚ÜíI k ih , ùîº-R‚ÜíI k ih

--   RelTy' : ‚Ñï ‚Üí Set _
--   RelTy' k = (‚àÄ {e t} ‚Üí e ‚ààùïç k ‚ü¶ t ‚üß ‚Üí e ‚ààùïç k ‚ü¶ t ‚üß·µ£)
--            √ó (‚àÄ {e t} ‚Üí e ‚ààùîº k ‚ü¶ t ‚üß ‚Üí e ‚ààùîº k ‚ü¶ t ‚üß·µ£)

--   mutual
--     ùïç-I‚ÜíR : ‚àÄ k ‚Üí (‚àÄ j ‚Üí j < k ‚Üí RelTy' j) ‚Üí (‚àÄ {e t} ‚Üí e ‚ààùïç k ‚ü¶ t ‚üß ‚Üí e ‚ààùïç k ‚ü¶ t ‚üß·µ£)
--     ùïç-I‚ÜíR = {!!}
--     -- ùïç-I‚ÜíR k ih {Œªx e}   {t‚ÇÅ ‚áí t‚ÇÇ} Œªxe‚ààùïç = ùïç-‚áí Œª {j} {v} j‚â§k v‚ààùïç·µ£ ‚Üí ùîº-I‚ÜíR j (wk-ih j‚â§k ih) (
--     --     e ‚ãØ ‚¶Ö v ‚¶Ü ‚ààùîº j ‚ü¶ t‚ÇÇ ‚üß·µ£
--     --   by let Œªxe‚ààùïç' = Rec.unfold-‚ààùïç {k = k} {e = Œªx e} {t = t‚ÇÅ ‚áí t‚ÇÇ} Œªxe‚ààùïç in
--     --       Rec.fold-‚ààùîº (Œªxe‚ààùïç' j‚â§k (Rec.unfold-‚ààùïç v‚ààùïç·µ£)))
--     -- ùïç-I‚ÜíR k ih {fold e} {¬µŒ± t}    fold-e‚ààùïç =
--     --   let fold-e‚ààùïç' = Rec.unfold-‚ààùïç {k = k} {e = fold e} {t = ¬µŒ± t} fold-e‚ààùïç in
--     --   ùïç-¬µ Œª {j} j<k ‚Üí œÄ‚ÇÅ (ih j j<k) (fold-e‚ààùïç' j<k)

--     ùîº-I‚ÜíR : ‚àÄ k ‚Üí (‚àÄ j ‚Üí j < k ‚Üí RelTy' j) ‚Üí (‚àÄ {e t} ‚Üí e ‚ààùîº k ‚ü¶ t ‚üß ‚Üí e ‚ààùîº k ‚ü¶ t ‚üß·µ£)
--     ùîº-I‚ÜíR = {!!}
--     -- ùîº-I‚ÜíR k ih {e} {t} e‚ààùîº = ùîº (Œª {j} {e'} j<k e‚Üíe' irred-e' ‚Üí ùïç-I‚ÜíR (k ‚à∏ j) (wk-ih (k‚à∏j‚â§k k j) ih)
--     --   (Rec.fold-‚ààùïç (Rec.unfold-‚ààùîº {k = k} {e = e} {t = t} e‚ààùîº j<k e‚Üíe' irred-e')))

--   I‚ÜíR : ‚àÄ k ‚Üí RelTy' k
--   I‚ÜíR = <-rec _ Œª k ih ‚Üí ùïç-I‚ÜíR k ih , ùîº-I‚ÜíR k ih

--   ùïç·µ£‚Üíùïç·µ¢ : e ‚ààùïç k ‚ü¶ t ‚üß·µ£ ‚Üí e ‚ààùïç k ‚ü¶ t ‚üß
--   ùïç·µ£‚Üíùïç·µ¢ {e} {k} {t} = œÄ‚ÇÅ (R‚ÜíI k) {e} {t}

--   ùîº·µ£‚Üíùîº·µ¢ : e ‚ààùîº k ‚ü¶ t ‚üß·µ£ ‚Üí e ‚ààùîº k ‚ü¶ t ‚üß
--   ùîº·µ£‚Üíùîº·µ¢ {e} {k} {t} = œÄ‚ÇÇ (R‚ÜíI k) {e} {t}

--   ùïç·µ¢‚Üíùïç·µ£ : e ‚ààùïç k ‚ü¶ t ‚üß ‚Üí e ‚ààùïç k ‚ü¶ t ‚üß·µ£
--   ùïç·µ¢‚Üíùïç·µ£ {e} {k} {t} = œÄ‚ÇÅ (I‚ÜíR k) {e} {t}

--   ùîº·µ¢‚Üíùîº·µ£ : e ‚ààùîº k ‚ü¶ t ‚üß ‚Üí e ‚ààùîº k ‚ü¶ t ‚üß·µ£
--   ùîº·µ¢‚Üíùîº·µ£ {e} {k} {t} = œÄ‚ÇÇ (I‚ÜíR k) {e} {t}

--   ùîæ·µ£‚Üíùîæ·µ¢ : ‚àÄ {œÉ} ‚Üí œÉ ‚ààùîæ k ‚ü¶ Œì ‚üß·µ£ ‚Üí œÉ ‚ààùîæ k ‚ü¶ Œì ‚üß
--   ùîæ·µ£‚Üíùîæ·µ¢ œÉ‚ààùîæ x = ùïç·µ£‚Üíùïç·µ¢ (œÉ‚ààùîæ x)

--   ùîæ·µ¢‚Üíùîæ·µ£ : ‚àÄ {œÉ} ‚Üí œÉ ‚ààùîæ k ‚ü¶ Œì ‚üß ‚Üí œÉ ‚ààùîæ k ‚ü¶ Œì ‚üß·µ£
--   ùîæ·µ¢‚Üíùîæ·µ£ œÉ‚ààùîæ x = ùïç·µ¢‚Üíùïç·µ£ (œÉ‚ààùîæ x)

--   ‚äß·µ£‚Üí‚äß·µ¢ : Œì ‚äß·µ£ e ‚à∂ t ‚Üí Œì ‚äß e ‚à∂ t
--   ‚äß·µ£‚Üí‚äß·µ¢ ‚äße œÉ‚ààùîæ = ùîº·µ£‚Üíùîº·µ¢ (‚äße (ùîæ·µ¢‚Üíùîæ·µ£ œÉ‚ààùîæ))

--   ‚äß·µ¢‚Üí‚äß·µ£ : Œì ‚äß e ‚à∂ t ‚Üí Œì ‚äß·µ£ e ‚à∂ t
--   ‚äß·µ¢‚Üí‚äß·µ£ ‚äße œÉ‚ààùîæ = ùîº·µ¢‚Üíùîº·µ£ (‚äße (ùîæ·µ£‚Üíùîæ·µ¢ œÉ‚ààùîæ))


-- open Rec
-- open Ind using (ùïç-‚áí; ùïç-¬µ; ùîº; unwrap-ùîº) renaming
--   ( _‚ààùïç_‚ü¶_‚üß to _‚ààùïç_‚ü¶_‚üß·µ¢
--   ; _‚ààùîº_‚ü¶_‚üß to _‚ààùîº_‚ü¶_‚üß·µ¢
--   ; _‚ààùîæ_‚ü¶_‚üß to _‚ààùîæ_‚ü¶_‚üß·µ¢
--   ; _‚äß_‚à∂_ to _‚äß·µ¢_‚à∂_
--   ; []ùîæ to []ùîæ·µ¢
--   ; _‚à∑ùîæ_ to _‚à∑ùîæ·µ¢_
--   )
-- open Rec‚ÜíInd

-- --------------------------------------------------------------------------------

-- monotonicity-ùïç·µ¢ : 
--   ‚àÄ {k} {v : [] ‚ä¢ ùïñ} {t : [] ‚ä¢ ùï•} {j} ‚Üí
--   j ‚â§ k ‚Üí
--   v ‚ààùïç k ‚ü¶ t ‚üß·µ¢ ‚Üí
--   v ‚ààùïç j ‚ü¶ t ‚üß·µ¢
-- monotonicity-ùïç·µ¢ {k} {.(Œªx e)} {.(t‚ÇÅ ‚áí t‚ÇÇ)} {j} j‚â§k (ùïç-‚áí {t‚ÇÅ = t‚ÇÅ} {e = e} {t‚ÇÇ = t‚ÇÇ} p) =
--   ùïç-‚áí Œª {i} {v} i‚â§j v‚ààùïçi ‚Üí
--     let i‚â§k = i ‚â§ k by ‚â§-trans i‚â§j j‚â§k in
--     p i‚â§k v‚ààùïçi
-- monotonicity-ùïç·µ¢ {k} {.(fold v)} {.(¬µŒ± t)}  {j} j‚â§k (ùïç-¬µ {v = v} {t = t} p) =
--   ùïç-¬µ Œª {i} i<j ‚Üí
--     let i<k = i < k by ‚â§-trans i<j j‚â§k in
--     p i<k

-- monotonicity-ùîº·µ¢ : 
--   ‚àÄ k (e : [] ‚ä¢ ùïñ) (t : [] ‚ä¢ ùï•) j ‚Üí
--   j ‚â§ k ‚Üí
--   e ‚ààùîº k ‚ü¶ t ‚üß·µ¢ ‚Üí
--   e ‚ààùîº j ‚ü¶ t ‚üß·µ¢
-- monotonicity-ùîº·µ¢ k e t j j‚â§k (ùîº p) =
--   ùîº Œª {i} {e'} i<j e‚Üí[i]e' irred-e' ‚Üí
--     let i<k = i < k by ‚â§-trans i<j j‚â§k in
--     let P = e' ‚ààùïç k ‚à∏ i ‚ü¶ t ‚üß·µ¢ by p i<k e‚Üí[i]e' irred-e' in
--     let j‚à∏i‚â§k‚à∏i = j ‚à∏ i ‚â§ k ‚à∏ i by ‚à∏-monoÀ°-‚â§ i j‚â§k in
--     monotonicity-ùïç·µ¢ j‚à∏i‚â§k‚à∏i P

-- monotonicity-ùîæ·µ¢ : 
--   ‚àÄ {k} {œÉ : ¬µ ‚Üí‚Çõ []} {Œì : Ctx ¬µ} {j} ‚Üí
--   j ‚â§ k ‚Üí
--   œÉ ‚ààùîæ k ‚ü¶ Œì ‚üß·µ¢ ‚Üí
--   œÉ ‚ààùîæ j ‚ü¶ Œì ‚üß·µ¢
-- monotonicity-ùîæ·µ¢ j‚â§k œÉ‚ààùîæ x = monotonicity-ùïç·µ¢ j‚â§k (œÉ‚ààùîæ x)

-- monotonicity-ùïç·µ£ : 
--   ‚àÄ {k} {v : [] ‚ä¢ ùïñ} {t : [] ‚ä¢ ùï•} {j} ‚Üí
--   j ‚â§ k ‚Üí
--   v ‚ààùïç k ‚ü¶ t ‚üß ‚Üí
--   v ‚ààùïç j ‚ü¶ t ‚üß
-- monotonicity-ùïç·µ£ j‚â§k v‚ààùïç = ùïç·µ¢‚Üíùïç·µ£ (monotonicity-ùïç·µ¢ j‚â§k (ùïç·µ£‚Üíùïç·µ¢ v‚ààùïç))

-- -- Fundamental Property

-- inv-Irred-fold :
--   Irred (fold e) ‚Üí
--   Irred e
-- inv-Irred-fold irred-fold-e (e' , e‚Ü™e') = irred-fold-e (fold e' , Œæ-fold e‚Ü™e')

-- inv-‚Ü™^-fold :
--   fold e ‚Ü™^[ k ] e' ‚Üí
--   Irred e' ‚Üí
--   ‚àÉ[ e'' ] e ‚Ü™^[ k ] e'' √ó Irred e'' √ó e' ‚â° fold e''
-- inv-‚Ü™^-fold ‚Ü™-refl irred-folde = _ , ‚Ü™-refl , inv-Irred-fold irred-folde , refl
-- inv-‚Ü™^-fold (‚Ü™-step (Œæ-fold e‚Ü™e‚Ä≤) fold-e‚Ä≤‚Ü™^e‚Ä≥) irred-e‚Ä≥ with inv-‚Ü™^-fold fold-e‚Ä≤‚Ü™^e‚Ä≥ irred-e‚Ä≥
-- ... | e‚Ä¥ , e‚Ä≤‚Ü™ ≤e‚Ä¥ , irred-e‚Ä¥ , e‚Ä≤‚â°folde‚Ä¥ = e‚Ä¥ , ‚Ü™-step e‚Ü™e‚Ä≤ e‚Ä≤‚Ü™ ≤e‚Ä¥ , irred-e‚Ä¥ , e‚Ä≤‚â°folde‚Ä¥

-- -- Those lemmas are only problematic because of cbv:
-- -- `fold e` is a value if `e` is a value,
-- -- To prove that `e` is a value we require a recursive call with j < k,
-- -- hence we need `‚àÄ k ‚Üí e ‚ààùïç k ‚ü¶ t ‚üß·µ¢` as assumption...

-- -- ùïç‚ÜíIrred : e ‚ààùïç suc k ‚ü¶ t ‚üß·µ¢ ‚Üí Irred^ (suc k) e
-- -- ùïç‚ÜíIrred (ùïç-‚áí p) (e' , ‚Ü™-step () q)
-- -- ùïç‚ÜíIrred {k = .zero} (ùïç-¬µ {v = v} p) (.(fold _) , ‚Ü™-step (Œæ-fold x) ‚Ü™-refl) = {!p (s‚â§s z‚â§n)!}
-- -- ùïç‚ÜíIrred {k = .(suc _)} (ùïç-¬µ {v = v} p) (e' , ‚Ü™-step (Œæ-fold x) (‚Ü™-step x‚ÇÅ q)) = {!!}

-- -- ùïç‚ÜíIrred : e ‚ààùïç k ‚ü¶ t ‚üß·µ¢ ‚Üí Irred^ (suc k) e
-- -- ùïç‚ÜíIrred (ùïç-‚áí p) (e' , ‚Ü™-step () q)
-- -- ùïç‚ÜíIrred {k = zero} (ùïç-¬µ {v = v} p) (.(fold _) , ‚Ü™-step (Œæ-fold v‚Üíe'') ‚Ü™-refl) = {!!}
-- -- ùïç‚ÜíIrred {k = suc k} (ùïç-¬µ {v = v} p) (e' , ‚Ü™-step (Œæ-fold v‚Üíe'') folde''‚Üí·µèe') = {!!}
-- -- -- ùïç‚ÜíIrred (ùïç-¬µ {v = v} p) (e' , ‚Ü™-step (Œæ-fold v‚Üíe'') folde''‚Üí·µèe') = {!!}
-- -- -- ùïç‚ÜíIrred (ùïç-¬µ {v = v} p) (e' , ‚Ü™-step (Œæ-fold v‚Üíe'') e‚ÇÇ‚Üí·µèe') with inv-‚Ü™^-fold - = {!!}

-- -- ùïç‚ÜíIrred : e ‚ààùïç k ‚ü¶ t ‚üß·µ¢ ‚Üí Irred^ k e
-- -- ùïç‚ÜíIrred (ùïç-‚áí p) (.(Œªx _) , ‚Ü™-refl) = {!p z‚â§n!}
-- -- ùïç‚ÜíIrred (ùïç-¬µ {v = v} p) (e' , q) = {!!}

-- -- ùïç‚ÜíIrred (ùïç-¬µ {v = v} p) (.(fold _) , Œæ-fold v‚Üíe') = ùïç‚ÜíIrred {!!} {!!}

-- -- ùïç‚ÜíIrred : e ‚ààùïç k ‚ü¶ t ‚üß·µ¢ ‚Üí Irred e
-- -- ùïç‚ÜíIrred (ùïç-‚áí p) (e' , ())
-- -- ùïç‚ÜíIrred (ùïç-¬µ {v = v} p) (.(fold _) , Œæ-fold v‚Üíe') = ùïç‚ÜíIrred {!!} {!!}

-- -- ùïç‚ÜíValue : e ‚ààùïç k ‚ü¶ t ‚üß·µ¢ ‚Üí Value e
-- -- ùïç‚ÜíValue (ùïç-‚áí p) = Œªxe
-- -- ùïç‚ÜíValue (ùïç-¬µ p) = fold (ùïç‚ÜíValue {!p!})

-- ùïç‚ÜíValue : (‚àÄ k ‚Üí e ‚ààùïç k ‚ü¶ t ‚üß) ‚Üí Value e
-- ùïç‚ÜíValue {e = Œªx e}     {t = t‚ÇÅ ‚áí t‚ÇÇ} f = Œªxe
-- ùïç‚ÜíValue {e = fold e}   {t = ¬µŒ± t}    f = fold (ùïç‚ÜíValue {e = e} Œª k ‚Üí
--                                            let folde‚ààùïçsk = Rec.unfold-‚ààùïç {k = suc k} {e = fold e} {t = ¬µŒ± t} (f (suc k)) in
--                                            folde‚ààùïçsk (k < suc k by (‚â§-refl {suc k})))
-- ùïç‚ÜíValue {e = Œªx e}     {t = ùüò}       f = ‚ä•-elim (f 0)
-- ùïç‚ÜíValue {e = Œªx e}     {t = ¬µŒ± t}    f = ‚ä•-elim (f 0)
-- ùïç‚ÜíValue {e = e‚ÇÅ ¬∑ e‚ÇÇ}  {t = t ‚áí t‚ÇÅ}  f = ‚ä•-elim (f 0)
-- ùïç‚ÜíValue {e = e‚ÇÅ ¬∑ e‚ÇÇ}  {t = ùüò}       f = ‚ä•-elim (f 0)
-- ùïç‚ÜíValue {e = e‚ÇÅ ¬∑ e‚ÇÇ}  {t = ¬µŒ± t}    f = ‚ä•-elim (f 0)
-- ùïç‚ÜíValue {e = fold e}   {t = t ‚áí t‚ÇÅ}  f = ‚ä•-elim (f 0)
-- ùïç‚ÜíValue {e = fold e}   {t = ùüò}       f = ‚ä•-elim (f 0)
-- ùïç‚ÜíValue {e = unfold e} {t = t ‚áí t‚ÇÅ}  f = ‚ä•-elim (f 0)
-- ùïç‚ÜíValue {e = unfold e} {t = ùüò}       f = ‚ä•-elim (f 0)
-- ùïç‚ÜíValue {e = unfold e} {t = ¬µŒ± t}    f = ‚ä•-elim (f 0)

-- Value‚ÜíIrred : Value e ‚Üí Irred e
-- Value‚ÜíIrred {¬µ} {.(Œªx e)} (Œªxe {e = e}) (e' , ())
-- Value‚ÜíIrred {¬µ} {.(fold e)} (fold {e = e} val-e) (.(fold e') , Œæ-fold {e' = e'} e‚Ü™e') = Value‚ÜíIrred val-e (e' , e‚Ü™e')
-- Value‚ÜíIrred {¬µ} {e} (neutral x) = {!irrelevant!}

-- -- Not sure if true in general! (requires ‚àÄ k in assumption?)
-- ùïç‚Üíùîº : e ‚ààùïç k ‚ü¶ t ‚üß·µ¢ ‚Üí e ‚ààùîº k ‚ü¶ t ‚üß·µ¢
-- ùïç‚Üíùîº {.(Œªx _)}   {k} {.(t‚ÇÅ ‚áí t‚ÇÇ)} (ùïç-‚áí {t‚ÇÅ = t‚ÇÅ} {t‚ÇÇ = t‚ÇÇ} p) =
--   ùîº (Œª {j} {e'} j<k Œªxe‚Ü™*e' irred-e' ‚Üí
--     e' ‚ààùïç k ‚à∏ j ‚ü¶ t‚ÇÅ ‚áí t‚ÇÇ ‚üß·µ¢
--   by {!contra Œªxe‚Ü™*e' irred-e'!})
-- ùïç‚Üíùîº {.(fold v)} {k} {.(¬µŒ± t)}  (ùïç-¬µ {v = v} {t = t} p) =
--     fold v ‚ààùîº k ‚ü¶ ¬µŒ± t ‚üß·µ¢
--   by ùîº Œª where
--     {zero} {e'} j<k foldv‚Ü™*e' irred-e' ‚Üí
--         e' ‚ààùïç k ‚à∏ zero ‚ü¶ ¬µŒ± t ‚üß·µ¢
--       by {!p (k ‚à∏ j)!} -- this works if we match on j! if j is zero, we're almost done by assumption!
--     {suc j} {e'} j<k foldv‚Ü™*e' irred-e' ‚Üí
--         e' ‚ààùïç k ‚à∏ suc j ‚ü¶ ¬µŒ± t ‚üß·µ¢
--       by let (e'' , v‚ÜíÀ¢ ≤e'' , irred-e'' , e'‚â°folde'') = inv-‚Ü™^-fold foldv‚Ü™*e' irred-e' in
--          subst {!!} {!!} (
--         fold e'' ‚ààùïç k ‚à∏ suc j ‚ü¶ ¬µŒ± t ‚üß·µ¢
--       by let pp = {!ùïç‚Üíùîº (p (k ‚à∏ suc j < k by ?))!} in
--          {!unwrap-ùîº pp!}
--          )


-- ‚ä¢‚Üí‚äß·µ¢ :
--   Œì ‚ä¢ e ‚à∂ t ‚Üí
--   Œì ‚äß·µ¢ e ‚à∂ t

-- ‚ä¢‚Üí‚äß·µ¢ {¬µ} {Œì} {.(` x)}      {t}        (œÑ-` {x = x} refl) =
--     Œì ‚äß·µ¢ ` x ‚à∂ t
--   by Œª {k} {œÉ} œÉ‚ààùîæ ‚Üí
--     œÉ ùïñ x ‚ààùîº k ‚ü¶ t ‚ãØ œÉ ‚üß·µ¢
--   by ùïç‚Üíùîº (œÉ‚ààùîæ x)

-- ‚ä¢‚Üí‚äß·µ¢ {¬µ} {Œì} {.(Œªx e)}     {.(t‚ÇÅ ‚áí t‚ÇÇ)} (œÑ-Œª {t‚ÇÅ = t‚ÇÅ} {e = e} {t‚ÇÇ = t‚ÇÇ} ‚ä¢e) =
--     Œì ‚äß·µ¢ Œªx e ‚à∂ t‚ÇÅ ‚áí t‚ÇÇ
--   by Œª {k} {œÉ} œÉ‚ààùîæ‚ü¶Œì‚üß ‚Üí
--     Œªx (e ‚ãØ œÉ ‚Üë‚Çõ ùïñ) ‚ààùîº k ‚ü¶ (t‚ÇÅ ‚ãØ œÉ) ‚áí (t‚ÇÇ ‚ãØ œÉ) ‚üß·µ¢
--   by ùïç‚Üíùîº (
--     Œªx (e ‚ãØ œÉ ‚Üë‚Çõ ùïñ) ‚ààùïç k ‚ü¶ (t‚ÇÅ ‚ãØ œÉ) ‚áí (t‚ÇÇ ‚ãØ œÉ) ‚üß·µ¢
--   by ùïç-‚áí Œª {j} {v} j‚â§k v‚ààùïç‚ü¶t‚ÇÅ‚ãØœÉ‚üß ‚Üí
--     e ‚ãØ œÉ ‚Üë‚Çõ ùïñ ‚ãØ ‚¶Ö v ‚¶Ü ‚ààùîº j ‚ü¶ t‚ÇÇ ‚ãØ œÉ ‚üß·µ¢
--   by subst‚ÇÇ (_‚ààùîº j ‚ü¶_‚üß·µ¢) (sym (‚ãØ‚Üë‚ãØ‚¶Ö‚¶Ü-is-‚ãØ,‚Çõ e v œÉ)) (wk-cancels-,‚Çõ t‚ÇÇ œÉ v) (
--     (e ‚ãØ (œÉ ,‚Çõ v)) ‚ààùîº j ‚ü¶ t‚ÇÇ ‚ãØ wk ‚ãØ (œÉ ,‚Çõ v) ‚üß·µ¢
--   by ‚ä¢‚Üí‚äß·µ¢ ‚ä¢e (
--     œÉ ,‚Çõ v ‚ààùîæ j ‚ü¶ Œì ,, t‚ÇÅ ‚üß·µ¢
--   by ùïç·µ£‚Üíùïç·µ¢ v‚ààùïç‚ü¶t‚ÇÅ‚ãØœÉ‚üß ‚à∑ùîæ·µ¢ monotonicity-ùîæ·µ¢ j‚â§k œÉ‚ààùîæ‚ü¶Œì‚üß)))

-- ‚ä¢‚Üí‚äß·µ¢ {¬µ} {Œì} {.(_ ¬∑ _)}    {t}        (œÑ-¬∑ ‚ä¢e‚ÇÅ ‚ä¢e‚ÇÇ) = {!!}

-- ‚ä¢‚Üí‚äß·µ¢ {¬µ} {Œì} {.(fold e)}   {.(¬µŒ± t)}  (œÑ-fold {e = e} {t = t} ‚ä¢e) =
--     Œì ‚äß·µ¢ fold e ‚à∂ ¬µŒ± t
--   by Œª {k} {œÉ} œÉ‚ààùîæ ‚Üí
--     fold (e ‚ãØ œÉ) ‚ààùîº k ‚ü¶ (¬µŒ± t) ‚ãØ œÉ ‚üß·µ¢
--   by ùîº Œª {j} {e'} j<k [folde‚ãØœÉ]‚Ü™ ≤[e'] irred-e' ‚Üí
--     e' ‚ààùïç k ‚à∏ j ‚ü¶ (¬µŒ± t) ‚ãØ œÉ ‚üß·µ¢
--   by let (e'' , e‚ãØœÉ‚Ü™e'' , irred-e'' , e'‚â°folde'') = inv-‚Ü™^-fold [folde‚ãØœÉ]‚Ü™ ≤[e'] irred-e' in -- TODO: if we would be able to match on the eq, stuff would be simpler...
--      let [e‚ãØœÉ]‚ààùîº·µè = e ‚ãØ œÉ ‚ààùîº k ‚ü¶ t ‚ãØ ‚¶Ö ¬µŒ± t ‚¶Ü ‚ãØ œÉ ‚üß·µ¢ by ‚ä¢‚Üí‚äß·µ¢ ‚ä¢e œÉ‚ààùîæ in
--      let e''‚ààùïç[k-j] = e'' ‚ààùïç k ‚à∏ j ‚ü¶ t ‚ãØ ‚¶Ö ¬µŒ± t ‚¶Ü ‚ãØ œÉ ‚üß·µ¢ by unwrap-ùîº [e‚ãØœÉ]‚ààùîº·µè j<k e‚ãØœÉ‚Ü™e'' irred-e'' in
--      subst (_‚ààùïç _ ‚ü¶ _ ‚üß·µ¢) (sym e'‚â°folde'') (
--     fold e'' ‚ààùïç k ‚à∏ j ‚ü¶ (¬µŒ± t) ‚ãØ œÉ ‚üß·µ¢
--   by ùïç-¬µ Œª {i} i<k‚à∏j ‚Üí
--     e'' ‚ààùïç i ‚ü¶ t ‚ãØ œÉ ‚Üë ùï• ‚ãØ ‚¶Ö (¬µŒ± t) ‚ãØ œÉ ‚¶Ü ‚üß·µ¢
--   by monotonicity-ùïç·µ¢ (i ‚â§ k ‚à∏ j by <‚áí‚â§ i<k‚à∏j) (
--     e'' ‚ààùïç k ‚à∏ j ‚ü¶ t ‚ãØ œÉ ‚Üë ùï• ‚ãØ ‚¶Ö (¬µŒ± t) ‚ãØ œÉ ‚¶Ü ‚üß·µ¢
--   by subst (_ ‚ààùïç _ ‚ü¶_‚üß·µ¢) (dist-‚¶Ö‚¶Ü‚Çõ-‚ãØ‚Çõ t (¬µŒ± t) œÉ) (
--     e'' ‚ààùïç k ‚à∏ j ‚ü¶ t ‚ãØ ‚¶Ö ¬µŒ± t ‚¶Ü ‚ãØ œÉ ‚üß·µ¢
--   by e''‚ààùïç[k-j] )))

-- ‚ä¢‚Üí‚äß·µ¢ {¬µ} {Œì} {.(unfold e)} {.(t ‚ãØ ‚¶Ö ¬µŒ± t ‚¶Ü)} (œÑ-unfold {e = e} {t = t} ‚ä¢e) =
--   {!!}
-- -- ‚ä¢‚Üí‚äß·µ¢ {¬µ} {Œì} {.(unfold e)} {.(t ‚ãØ ‚¶Ö ¬µŒ± t ‚¶Ü)} (œÑ-unfold {e = e} {t = t} ‚ä¢e) =
-- --     Œì ‚äß·µ¢ unfold e ‚à∂ t ‚ãØ ‚¶Ö ¬µŒ± t ‚¶Ü
-- --   by Œª {k} {œÉ} œÉ‚ààùîæ ‚Üí
-- --     unfold (e ‚ãØ œÉ) ‚ààùîº k ‚ü¶ t ‚ãØ ‚¶Ö ¬µŒ± t ‚¶Ü ‚ãØ œÉ ‚üß·µ¢
-- --   by ùîº Œª {j} {e'} j<k [unfolde‚ãØœÉ]‚Ü™ ≤[e'] irred-e' ‚Üí
-- --     e' ‚ààùïç k ‚à∏ j ‚ü¶ t ‚ãØ ‚¶Ö ¬µŒ± t ‚¶Ü ‚ãØ œÉ ‚üß·µ¢
-- --   by let e‚ãØœÉ‚ààùîº·µè = e ‚ãØ œÉ ‚ààùîº k ‚ü¶ (¬µŒ± t) ‚ãØ œÉ ‚üß·µ¢ by ‚ä¢‚Üí‚äß·µ¢ ‚ä¢e œÉ‚ààùîæ in
-- --      -- requires inversion lemma
-- --      let e‚ãØœÉ‚Üí ≤e'' = (e ‚ãØ œÉ) ‚Ü™^[ j ] e'' by {!!} in
-- --      subst (e' ‚ààùïç k ‚à∏ j ‚ü¶_‚üß·µ¢) (dist-‚¶Ö‚¶Ü‚Çõ-‚ãØ‚Çõ {!t!} {!!} {!!}) (
-- --     e' ‚ààùïç k ‚à∏ j ‚ü¶ (¬µŒ± t) ‚ãØ œÉ ‚üß·µ¢
-- --   by unwrap-ùîº e‚ãØœÉ‚ààùîº·µè {j = j} j<k e‚ãØœÉ‚Üí ≤e' irred-e'
-- --      )

-- -- ‚ä¢‚Üí‚äß·µ¢ (œÑ-` x)       = {!!}
-- -- ‚ä¢‚Üí‚äß·µ¢ (œÑ-Œª ‚ä¢e)      = {!!}
-- -- ‚ä¢‚Üí‚äß·µ¢ (œÑ-¬∑ ‚ä¢e‚ÇÅ ‚ä¢e‚ÇÇ) = {!!}
-- -- ‚ä¢‚Üí‚äß·µ¢ (œÑ-fold ‚ä¢e)   =
-- --     Œì ‚äß·µ¢ fold e ‚à∂
-- -- fold (e ‚ãØ œÉ) ‚ààùîº k ‚ü¶ ¬µŒ± (t ‚ãØ œÉ S.‚Üë ùï•) ‚üß·µ¢
-- -- {!!}
-- -- ‚ä¢‚Üí‚äß·µ¢ (œÑ-unfold ‚ä¢e) = {!!}

-- ‚ä¢‚Üí‚äß :
--   Œì ‚ä¢ e ‚à∂ t ‚Üí
--   Œì ‚äß e ‚à∂ t
-- ‚ä¢‚Üí‚äß (œÑ-` x)       = {!!}
-- ‚ä¢‚Üí‚äß (œÑ-Œª ‚ä¢e)      = {!!}
-- ‚ä¢‚Üí‚äß (œÑ-¬∑ ‚ä¢e‚ÇÅ ‚ä¢e‚ÇÇ) = {!!}
-- ‚ä¢‚Üí‚äß (œÑ-fold ‚ä¢e)   {k} œÉ‚ààùîæ = {!!}
-- ‚ä¢‚Üí‚äß (œÑ-unfold ‚ä¢e) = {!!}




-- -- Safe : [] ‚ä¢ ùïñ ‚Üí Set
-- -- Safe e = ‚àÄ e' ‚Üí e ‚Ü™* e' ‚Üí Value e' ‚äé Red e'

-- -- Red? : ‚àÄ (e : [] ‚ä¢ ùïñ) ‚Üí Dec (Red e)
-- -- Red? e = {!!}

-- -- -- TODO: use func rep for ùîæ or remove.
-- -- id‚Çõ‚ààùîæ‚ü¶‚àÖ‚üß : id‚Çõ ‚ààùîæ k ‚ü¶ ‚àÖ ‚üß
-- -- id‚Çõ‚ààùîæ‚ü¶‚àÖ‚üß = []

-- -- ùïç·µ¢‚ÜíValue : e ‚ààùïç k ‚ü¶ t ‚üß·µ¢ ‚Üí Value e
-- -- ùïç·µ¢‚ÜíValue (ùïç-‚áí x) = Œªxe
-- -- ùïç·µ¢‚ÜíValue {e = fold v} {k = k} {t = ¬µŒ± t} (ùïç-¬µ {v = v} foldv‚ààùïç) =
-- --   let foldv‚ààùïç·µ£ = v ‚ààùïç k ‚ü¶ t ‚ãØ ‚¶Ö ¬µŒ± t ‚¶Ü ‚üß  by {!Rec.unfold-‚ààùïç foldv‚ààùïç!} in
-- --   let foldv‚ààùïç·µ¢ = v ‚ààùïç k ‚ü¶ t ‚ãØ ‚¶Ö ¬µŒ± t ‚¶Ü ‚üß·µ¢ by ùïç·µ£‚Üíùïç·µ¢ foldv‚ààùïç·µ£ in
-- --   {!!}
-- --   -- fold (ùïç·µ¢‚ÜíValue (ùïç·µ£‚Üíùïç·µ¢ foldv‚ààùïç))
-- -- -- ùïç·µ¢‚ÜíValue {fold e} {k} {¬µŒ± t}    fold-e‚ààùïç‚ü¶t‚üß = fold (ùïç‚ÜíValue {!fold-e‚ààùïç‚ü¶t‚üß {!j<k!}!})

-- -- ùïç·µ¢‚ÜíValue' : (‚àÄ k ‚Üí e ‚ààùïç k ‚ü¶ t ‚üß·µ¢) ‚Üí Value e
-- -- ùïç·µ¢‚ÜíValue' = {!!}
-- -- -- ùïç·µ¢‚ÜíValue' {e = Œªx e}     {t = t‚ÇÅ ‚áí t‚ÇÇ} f = Œªxe
-- -- -- ùïç·µ¢‚ÜíValue' {e = fold e}   {t = ¬µŒ± t}    f = fold (ùïç·µ¢‚ÜíValue' {e = e} Œª k ‚Üí {!let ùïç-¬µ x = f (suc k) in ? !})
-- -- --                                             -- fold (ùïç·µ¢‚ÜíValue' {e = e} Œª k ‚Üí
-- -- --                                             -- let folde‚ààùïçsk = Rec.unfold-‚ààùïç {k = suc k} {e = fold e} {t = ¬µŒ± t} (f (suc k)) in
-- -- --                                             -- folde‚ààùïçsk (k < suc k by (‚â§-refl {suc k})))
-- -- -- -- ùïç·µ¢‚ÜíValue' {e = Œªx e}     {t = ùüò}       f = ‚ä•-elim (f 0)
-- -- -- -- ùïç·µ¢‚ÜíValue' {e = Œªx e}     {t = ¬µŒ± t}    f = ‚ä•-elim (f 0)
-- -- -- -- ùïç·µ¢‚ÜíValue' {e = e‚ÇÅ ¬∑ e‚ÇÇ}  {t = t ‚áí t‚ÇÅ}  f = ‚ä•-elim (f 0)
-- -- -- -- ùïç·µ¢‚ÜíValue' {e = e‚ÇÅ ¬∑ e‚ÇÇ}  {t = ùüò}       f = ‚ä•-elim (f 0)
-- -- -- -- ùïç·µ¢‚ÜíValue' {e = e‚ÇÅ ¬∑ e‚ÇÇ}  {t = ¬µŒ± t}    f = ‚ä•-elim (f 0)
-- -- -- -- ùïç·µ¢‚ÜíValue' {e = fold e}   {t = t ‚áí t‚ÇÅ}  f = ‚ä•-elim (f 0)
-- -- -- -- ùïç·µ¢‚ÜíValue' {e = fold e}   {t = ùüò}       f = ‚ä•-elim (f 0)
-- -- -- -- ùïç·µ¢‚ÜíValue' {e = unfold e} {t = t ‚áí t‚ÇÅ}  f = ‚ä•-elim (f 0)
-- -- -- -- ùïç·µ¢‚ÜíValue' {e = unfold e} {t = ùüò}       f = ‚ä•-elim (f 0)
-- -- -- -- ùïç·µ¢‚ÜíValue' {e = unfold e} {t = ¬µŒ± t}    f = ‚ä•-elim (f 0)

-- -- ùïç‚ÜíValue' : (‚àÄ k ‚Üí e ‚ààùïç k ‚ü¶ t ‚üß) ‚Üí Value e
-- -- ùïç‚ÜíValue' {e = Œªx e}     {t = t‚ÇÅ ‚áí t‚ÇÇ} f = Œªxe
-- -- ùïç‚ÜíValue' {e = fold e}   {t = ¬µŒ± t}    f = fold (ùïç‚ÜíValue' {e = e} Œª k ‚Üí
-- --                                             let folde‚ààùïçsk = Rec.unfold-‚ààùïç {k = suc k} {e = fold e} {t = ¬µŒ± t} (f (suc k)) in
-- --                                             folde‚ààùïçsk (k < suc k by (‚â§-refl {suc k})))
-- -- ùïç‚ÜíValue' {e = Œªx e}     {t = ùüò}       f = ‚ä•-elim (f 0)
-- -- ùïç‚ÜíValue' {e = Œªx e}     {t = ¬µŒ± t}    f = ‚ä•-elim (f 0)
-- -- ùïç‚ÜíValue' {e = e‚ÇÅ ¬∑ e‚ÇÇ}  {t = t ‚áí t‚ÇÅ}  f = ‚ä•-elim (f 0)
-- -- ùïç‚ÜíValue' {e = e‚ÇÅ ¬∑ e‚ÇÇ}  {t = ùüò}       f = ‚ä•-elim (f 0)
-- -- ùïç‚ÜíValue' {e = e‚ÇÅ ¬∑ e‚ÇÇ}  {t = ¬µŒ± t}    f = ‚ä•-elim (f 0)
-- -- ùïç‚ÜíValue' {e = fold e}   {t = t ‚áí t‚ÇÅ}  f = ‚ä•-elim (f 0)
-- -- ùïç‚ÜíValue' {e = fold e}   {t = ùüò}       f = ‚ä•-elim (f 0)
-- -- ùïç‚ÜíValue' {e = unfold e} {t = t ‚áí t‚ÇÅ}  f = ‚ä•-elim (f 0)
-- -- ùïç‚ÜíValue' {e = unfold e} {t = ùüò}       f = ‚ä•-elim (f 0)
-- -- ùïç‚ÜíValue' {e = unfold e} {t = ¬µŒ± t}    f = ‚ä•-elim (f 0)

-- -- ùïç‚ÜíValue : e ‚ààùïç k ‚ü¶ t ‚üß ‚Üí Value e
-- -- ùïç‚ÜíValue {Œªx e}   {k} {t‚ÇÅ ‚áí t‚ÇÇ} Œªxe‚ààùïç‚ü¶t‚üß    = Œªxe
-- -- ùïç‚ÜíValue {fold e} {k} {¬µŒ± t}    fold-e‚ààùïç‚ü¶t‚üß = fold (ùïç‚ÜíValue {!fold-e‚ààùïç‚ü¶t‚üß {!j<k!}!})

-- -- ‚äß·µ¢‚Üísafe :
-- --   ‚àÖ ‚äß·µ¢ e ‚à∂ t ‚Üí
-- --   Safe e
-- -- ‚äß·µ¢‚Üísafe {e} {t} ‚äße e‚Ä≤ e‚Ü™*e‚Ä≤ with Red? e‚Ä≤
-- -- ... | yes red-e‚Ä≤                  = inj‚ÇÇ red-e‚Ä≤
-- -- ... | no irred-e‚Ä≤ rewrite ‚ãØ-id‚Çõ e = inj‚ÇÅ
-- --   let (k , e‚Ü™*[k]e‚Ä≤) = ‚Ü™*‚Üí‚Ü™^ e‚Ü™*e‚Ä≤ in
-- --   let e‚ãØid‚ààùîº‚ü¶t‚ãØid‚üß = ‚äße {k = k} [] in
-- --   let e‚ààùîº‚ü¶t‚üß = subst‚ÇÇ (_‚ààùîº k ‚ü¶_‚üß·µ¢) (‚ãØ-id‚Çõ e) (‚ãØ-id‚Çõ t) e‚ãØid‚ààùîº‚ü¶t‚ãØid‚üß in
-- --   ùïç‚ÜíValue' {!!}
-- --   -- (ùïç‚ÜíValue' (Œª k ‚Üí
-- --   --   let e‚ãØid‚ààùîº‚ü¶t‚ãØid‚üß = ‚äße {k = suc k} [] in
-- --   --   let e‚ààùîº‚ü¶t‚üß = subst‚ÇÇ (_‚ààùîº suc k ‚ü¶_‚üß·µ¢) (‚ãØ-id‚Çõ e) (‚ãØ-id‚Çõ t) e‚ãØid‚ààùîº‚ü¶t‚ãØid‚üß in
-- --   --   let e‚Ä≤‚ààùïç‚ü¶t‚üß = unwrap-ùîº e‚ààùîº‚ü¶t‚üß (k < suc k by {!!}) {!e‚Ü™*[k]e‚Ä≤!} irred-e‚Ä≤ in
-- --   --   {!e‚Ä≤‚ààùïç‚ü¶t‚üß!}))
-- --   -- (ùïç‚ÜíValue' (Œª k ‚Üí
-- --   --   let e‚ãØid‚ààùîº‚ü¶t‚ãØid‚üß = ‚äße {k = suc k} [] in
-- --   --   let e‚ààùîº‚ü¶t‚üß = subst‚ÇÇ (_‚ààùîº suc k ‚ü¶_‚üß·µ¢) (‚ãØ-id‚Çõ e) (‚ãØ-id‚Çõ t) e‚ãØid‚ààùîº‚ü¶t‚ãØid‚üß in
-- --   --   let e‚Ä≤‚ààùïç‚ü¶t‚üß = unwrap-ùîº e‚ààùîº‚ü¶t‚üß (k < suc k by {!!}) {!e‚Ü™*[k]e‚Ä≤!} irred-e‚Ä≤ in
-- --   --   {!e‚Ä≤‚ààùïç‚ü¶t‚üß!}))

-- -- ‚äß‚Üísafe :
-- --   ‚àÖ ‚äß e ‚à∂ t ‚Üí
-- --   Safe e
-- -- ‚äß‚Üísafe {e} {t} ‚äße e‚Ä≤ e‚Ü™*e‚Ä≤ with Red? e‚Ä≤
-- -- ... | yes red-e‚Ä≤                  = inj‚ÇÇ red-e‚Ä≤
-- -- ... | no irred-e‚Ä≤ rewrite ‚ãØ-id‚Çõ e = inj‚ÇÅ
-- --   let (k , e‚Ü™*[k]e‚Ä≤) = ‚Ü™*‚Üí‚Ü™^ e‚Ü™*e‚Ä≤ in
-- --   let e‚ãØid‚ààùîº‚ü¶t‚ãØid‚üß = ‚äße {k = k} id‚Çõ‚ààùîæ‚ü¶‚àÖ‚üß in
-- --   let e‚ààùîº‚ü¶t‚üß = subst‚ÇÇ (_‚ààùîº k ‚ü¶_‚üß) (‚ãØ-id‚Çõ e) (‚ãØ-id‚Çõ t) e‚ãØid‚ààùîº‚ü¶t‚ãØid‚üß in
-- --   let e‚Ä≤‚ààùïç‚ü¶t‚üß = e‚ààùîº‚ü¶t‚üß {!impossible!} e‚Ü™*[k]e‚Ä≤ irred-e‚Ä≤ in
-- --   ùïç‚ÜíValue' (Œª k ‚Üí
-- --     let e‚ãØid‚ààùîº‚ü¶t‚ãØid‚üß = ‚äße {k = k} id‚Çõ‚ààùîæ‚ü¶‚àÖ‚üß in
-- --     let e‚ààùîº‚ü¶t‚üß = subst‚ÇÇ (_‚ààùîº k ‚ü¶_‚üß) (‚ãØ-id‚Çõ e) (‚ãØ-id‚Çõ t) e‚ãØid‚ààùîº‚ü¶t‚ãØid‚üß in
-- --     let e‚Ä≤‚ààùïç‚ü¶t‚üß = e‚ààùîº‚ü¶t‚üß {!impossible!} e‚Ü™*[k]e‚Ä≤ irred-e‚Ä≤ in
-- --     {!e‚Ä≤‚ààùïç‚ü¶t‚üß!})
-- --   -- let e‚Ä≤‚ààùïç‚ü¶t‚üß = e‚ààùîº‚ü¶t‚üß e‚Ü™*e‚Ä≤ irred-e‚Ä≤ in
-- --   -- ùïç‚ÜíValue e‚Ä≤‚ààùïç‚ü¶t‚üß


