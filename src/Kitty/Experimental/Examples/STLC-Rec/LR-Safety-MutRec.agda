module Kitty.Experimental.Examples.STLC-Rec.LR-Safety where

open import Kitty.Experimental.Examples.STLC-Rec.Definitions hiding (_,_)
open import Kitty.Experimental.Examples.STLC-Rec.SubjectReduction

open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Data.List using (List; []; _‚à∑_)
open import Data.Nat hiding (_‚äî_)
open import Data.Nat.Induction using (<-rec; <-wellFounded)
open import Data.Nat.Properties using (‚â§-trans; ‚â§-refl; ‚â§-step)
open import Data.Product using (Œ£; _√ó_; _,_; Œ£-syntax; ‚àÉ-syntax) renaming (proj‚ÇÅ to œÄ‚ÇÅ; proj‚ÇÇ to œÄ‚ÇÇ) 
open import Data.Unit.Polymorphic
open import Induction
open import Induction.WellFounded as WF using (WfRec)
open import Level using (Level; _‚äî_)
open import Relation.Binary.PropositionalEquality hiding ([_])
open import Relation.Nullary using (¬¨_)

-- Lemmas ----------------------------------------------------------------------

wk-ih : ‚àÄ {‚Ñì j k} {P : ‚Ñï ‚Üí Set ‚Ñì} ‚Üí
  j ‚â§ k ‚Üí
  WfRec _<_ P k ‚Üí
  WfRec _<_ P j
wk-ih j‚â§k ih i i<j = ih i (‚â§-trans i<j j‚â§k)

k‚à∏j‚â§k : ‚àÄ k j ‚Üí k ‚à∏ j ‚â§ k
k‚à∏j‚â§k k       zero    = ‚â§-refl
k‚à∏j‚â§k zero    (suc j) = ‚â§-refl
k‚à∏j‚â§k (suc k) (suc j) = ‚â§-trans (k‚à∏j‚â§k k j) (‚â§-step ‚â§-refl)

-- Formalization ---------------------------------------------------------------

Gas : Set
Gas = ‚Ñï

variable
  ‚Ñì ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ : Level
  A B C : Set ‚Ñì
  k k‚ÇÅ k‚ÇÇ k‚ÇÉ k' k‚ÇÅ' k‚ÇÇ' k‚ÇÉ' : Gas
  j j‚ÇÅ j‚ÇÇ j‚ÇÉ j' j‚ÇÅ' j‚ÇÇ' j‚ÇÉ' : Gas
  i i‚ÇÅ i‚ÇÇ i‚ÇÉ i' i‚ÇÅ' i‚ÇÇ' i‚ÇÉ' : Gas

data _‚Ü™^[_]_ : ¬µ ‚ä¢ ùïñ ‚Üí Gas ‚Üí ¬µ ‚ä¢ ùïñ ‚Üí Set where
  ‚Ü™-refl : e ‚Ü™^[ zero ] e
  ‚Ü™-step : e‚ÇÅ ‚Ü™ e‚ÇÇ ‚Üí e‚ÇÇ ‚Ü™^[ k ] e‚ÇÉ ‚Üí e‚ÇÅ ‚Ü™^[ suc k ] e‚ÇÉ

‚Ü™^-trans : e‚ÇÅ ‚Ü™^[ k ] e‚ÇÇ ‚Üí e‚ÇÇ ‚Ü™^[ k' ] e‚ÇÉ ‚Üí e‚ÇÅ ‚Ü™^[ k + k' ] e‚ÇÉ
‚Ü™^-trans ‚Ü™-refl q = q
‚Ü™^-trans (‚Ü™-step s p) q = ‚Ü™-step s (‚Ü™^-trans p q)

-- ‚Ü™^‚Üí‚Ü™* : e‚ÇÅ ‚Ü™^[ k ] e‚ÇÇ ‚Üí e‚ÇÅ ‚Ü™* e‚ÇÇ
-- ‚Ü™^‚Üí‚Ü™* p = ?

-- ‚Ü™*‚Üí‚Ü™^ : e‚ÇÅ ‚Ü™* e‚ÇÇ ‚Üí ‚àÉ[ k ] (e‚ÇÅ ‚Ü™^[ k ] e‚ÇÇ)
-- ‚Ü™*‚Üí‚Ü™^ p = ?

Irred : ¬µ ‚ä¢ ùïñ ‚Üí Set
Irred e = ‚àÄ e' ‚Üí ¬¨ (e ‚Ü™ e')

-- Type of the `_‚ààùïç_‚ü¶_‚üß` and `_‚ààùîº_‚ü¶_‚üß` relations, but without the `Gas`-parameter.
RelTy : Set‚ÇÅ
RelTy = ‚àÄ {¬µ} ‚Üí ¬µ ‚ä¢ ùïñ ‚Üí ¬µ ‚à∂‚ä¢ ùïñ ‚Üí Set


-- Field accessors for the Rùïç and Rùîº components of the induction hypothesis.
Rùïç< : ‚àÄ {k} ‚Üí (‚àÄ j ‚Üí j < k ‚Üí A √ó B) ‚Üí (‚àÄ j ‚Üí j < k ‚Üí A)
Rùïç< ih j j<k = œÄ‚ÇÅ (ih j j<k)
Rùîº< : ‚àÄ {k} ‚Üí (‚àÄ j ‚Üí j < k ‚Üí A √ó B) ‚Üí (‚àÄ j ‚Üí j < k ‚Üí B)
Rùîº< ih j j<k = œÄ‚ÇÇ (ih j j<k)

Rùïç Rùîº : ‚àÄ (k : Gas) ‚Üí WfRec _<_ (Œª _ ‚Üí RelTy √ó RelTy) k ‚Üí RelTy
Rùïç k ih _        (`[ p ] x) = ‚ä•
Rùïç k ih (Œªx e)   (t‚ÇÅ ‚áí t‚ÇÇ)  = ‚àÄ {j v} ‚Üí
                              (j‚â§k : j ‚â§ k) ‚Üí
                              Rùïç j (wk-ih j‚â§k ih) v t‚ÇÅ ‚Üí
                              Rùîº j (wk-ih j‚â§k ih) (e ‚ãØ ‚¶Ö v ‚¶Ü) t‚ÇÇ
Rùïç k ih _        (t‚ÇÅ ‚áí t‚ÇÇ)  = ‚ä•
Rùïç k ih _        ùüò          = ‚ä•
Rùïç k ih (fold v) (¬µŒ± t)     = ‚àÄ {j} ‚Üí
                              (j<k : j < k) ‚Üí
                              Rùïç< ih j j<k v (t ‚ãØ ‚¶Ö ¬µŒ± t ‚¶Ü)
Rùïç k ih _        (¬µŒ± t)     = ‚ä•
Rùîº k ih e        t          = ‚àÄ {j e'} ‚Üí
                              (j<k : j < k) ‚Üí
                              e ‚Ü™^[ j ] e' √ó (Irred e' ‚Üí Rùïç (k ‚à∏ j) (wk-ih (k‚à∏j‚â§k k j) ih) e' t)

R : ‚àÄ (k : Gas) ‚Üí
  WfRec _<_ (Œª _ ‚Üí RelTy √ó RelTy) k ‚Üí
  RelTy √ó RelTy
R k ih = Rùïç k ih , Rùîº k ih

infix 3 _‚ààùïç_‚ü¶_‚üß  _‚ààùîº_‚ü¶_‚üß

_‚ààùïç_‚ü¶_‚üß _‚ààùîº_‚ü¶_‚üß : ‚àÄ {¬µ} ‚Üí ¬µ ‚ä¢ ùïñ ‚Üí Gas ‚Üí ¬µ ‚à∂‚ä¢ ùïñ ‚Üí Set
v ‚ààùïç k ‚ü¶ t ‚üß = œÄ‚ÇÅ (<-rec _ R k) v t
e ‚ààùîº k ‚ü¶ t ‚üß = œÄ‚ÇÇ (<-rec _ R k) e t

data _‚ààùîæ_‚ü¶_‚üß : ‚àÄ {¬µ‚ÇÅ ¬µ‚ÇÇ} ‚Üí ¬µ‚ÇÅ ‚Üí‚Çõ ¬µ‚ÇÇ ‚Üí Gas ‚Üí Ctx ¬µ‚ÇÅ ‚Üí Set where
  [] : id‚Çõ ‚ààùîæ k ‚ü¶ ‚àÖ ‚üß
  _‚à∑_ : {œÉ : ¬µ‚ÇÅ ‚Üí‚Çõ ¬µ‚ÇÇ} {k : Gas} {Œì : Ctx ¬µ‚ÇÅ} {v : ¬µ‚ÇÇ ‚ä¢ ùïñ} {t : ¬µ‚ÇÅ ‚ä¢ ùï•} ‚Üí
    v        ‚ààùïç k ‚ü¶ t ‚ãØ œÉ  ‚üß ‚Üí
    œÉ        ‚ààùîæ k ‚ü¶ Œì      ‚üß ‚Üí
    (œÉ ,‚Çõ v) ‚ààùîæ k ‚ü¶ Œì ,, t ‚üß

_‚äß_‚à∂_ : Ctx ¬µ ‚Üí ¬µ ‚ä¢ ùïñ ‚Üí ¬µ ‚à∂‚ä¢ ùïñ ‚Üí Set
Œì ‚äß e ‚à∂ t = ‚àÄ {k œÉ} ‚Üí
  œÉ       ‚ààùîæ k ‚ü¶ Œì ‚üß ‚Üí
  (e ‚ãØ œÉ) ‚ààùîº k ‚ü¶ t ‚üß

infixr 0 _by_
_by_ : ‚àÄ {‚Ñì} (A : Set ‚Ñì) ‚Üí A ‚Üí A
A by a = a

monotonicity : 
  ‚àÄ k ¬µ (v : ¬µ ‚ä¢ ùïñ) (t : ¬µ ‚ä¢ ùï•) j ‚Üí
  v ‚ààùïç k ‚ü¶ t ‚üß ‚Üí
  j ‚â§ k ‚Üí
  v ‚ààùïç j ‚ü¶ t ‚üß
monotonicity = <-rec _ Œª where
  k ih ¬µ (Œªx v)   (t‚ÇÅ ‚áí t‚ÇÇ) j     v‚ààùïç j‚â§k ‚Üí Œª j‚ÇÅ‚â§j v‚ÇÅ‚ààùïç‚ü¶t‚ÇÅ‚üß j‚ÇÇ<j‚ÇÅ ‚Üí {!j‚â§sk!} , Œª irred-e' ‚Üí {!!}
  k ih ¬µ (fold v) (¬µŒ± t)    j     v‚ààùïç j‚â§k ‚Üí
    fold v ‚ààùïç j ‚ü¶ ¬µŒ± t ‚üß          by Œª {j = i} i<j ‚Üí
      -- let x = v ‚ààùïç i ‚ü¶ t ‚ãØ S.‚¶Ö ¬µŒ± t ‚¶Ü ‚üß  by  ih j {!j‚â§k!} ¬µ v (t ‚ãØ ‚¶Ö ¬µŒ± t ‚¶Ü) i {!v‚ààùïç i!} {!i‚â§j!} in
      let i<k = i < k by ‚â§-trans i<j j‚â§k in
      let y = v‚ààùïç i<k in
      let x = v ‚ààùïç i ‚ü¶ t ‚ãØ S.‚¶Ö ¬µŒ± t ‚¶Ü ‚üß  by  ih i i<k ¬µ v (t ‚ãØ ‚¶Ö ¬µŒ± t ‚¶Ü) i {!v‚ààùïç i<k!} ‚â§-refl in
      {! v‚ààùïç i<k!}
-- monotonicity = <-rec _ Œª where
--   -- {!ih _ j<k ¬µ v (t ‚ãØ ‚¶Ö ¬µŒ± t ‚¶Ü) _ ? ?!}
--   zero    ih ¬µ (Œªx v)   (t‚ÇÅ ‚áí t‚ÇÇ) .zero v‚ààùïç z‚â§n ‚Üí Œª { z‚â§n x () }
--   zero    ih ¬µ (fold v) (¬µŒ± t)    .zero v‚ààùïç z‚â§n ‚Üí Œª ()
--   (suc k) ih ¬µ (Œªx v)   (t‚ÇÅ ‚áí t‚ÇÇ) j     v‚ààùïç j‚â§sk ‚Üí Œª j‚ÇÅ‚â§j v‚ÇÅ‚ààùïç‚ü¶t‚ÇÅ‚üß j‚ÇÇ<j‚ÇÅ ‚Üí {!j‚â§sk!} , Œª irred-e' ‚Üí {!!}
--   (suc k) ih ¬µ (fold v) (¬µŒ± t)    j     v‚ààùïç j‚â§sk ‚Üí
--     fold v ‚ààùïç j ‚ü¶ ¬µŒ± t ‚üß          by Œª {j = i} i<j ‚Üí
--       -- let x = v ‚ààùïç i ‚ü¶ t ‚ãØ S.‚¶Ö ¬µŒ± t ‚¶Ü ‚üß  by  ih j {!j‚â§sk!} ¬µ v (t ‚ãØ ‚¶Ö ¬µŒ± t ‚¶Ü) i {!v‚ààùïç i!} {!i‚â§j!} in
--       let x = v ‚ààùïç i ‚ü¶ t ‚ãØ S.‚¶Ö ¬µŒ± t ‚¶Ü ‚üß  by  ih j {!j‚â§sk!} ¬µ v (t ‚ãØ ‚¶Ö ¬µŒ± t ‚¶Ü) i {!v‚ààùïç i!} {!i‚â§j!} in
--       {! x!}
--   -- (suc k) ih ¬µ (fold v) (¬µŒ± t)    zero  v‚ààùïç j‚â§k ‚Üí
--   --   fold v ‚ààùïç 0 ‚ü¶ ¬µŒ± t ‚üß          by Œª
--   --     {
--   --       {j = zero} i<j ‚Üí
--   --         {!v ‚ààùïç 0 ‚ü¶ t ‚ãØ ‚¶Ö ¬µŒ± t ‚¶Ü ‚üß    by ?!}
--   --     ; {j = suc i} i<j ‚Üí
--   --         {!v ‚ààùïç suc i ‚ü¶ t ‚ãØ ‚¶Ö ¬µŒ± t ‚¶Ü ‚üß    by ?!}
--   --     }
--   -- -- (suc k) ih ¬µ (fold v) (¬µŒ± t)    zero  v‚ààùïç j‚â§k ‚Üí
--   -- --   fold v ‚ààùïç 0 ‚ü¶ ¬µŒ± t ‚üß          by Œª { {j = i} i<j ‚Üí
--   -- --       {!v ‚ààùïç i ‚ü¶ t ‚ãØ ‚¶Ö ¬µŒ± t ‚¶Ü ‚üß    by ?!}
--   -- --     }
--   -- (suc k) ih ¬µ (fold v) (¬µŒ± t)    (suc j) v‚ààùïç j‚â§k ‚Üí
--   --   fold v ‚ààùïç suc j ‚ü¶ ¬µŒ± t ‚üß          by Œª { {j = i} i<j ‚Üí
--   --       {!v ‚ààùïç i ‚ü¶ t ‚ãØ ‚¶Ö ¬µŒ± t ‚¶Ü ‚üß    by ?!}
--   --     }
--   -- -- (suc k) ih ¬µ (fold v) (¬µŒ± t)    j     v‚ààùïç j‚â§k ‚Üí
--   -- --   fold v ‚ààùïç j ‚ü¶ ¬µŒ± t ‚üß          by Œª {j = i} i<j ‚Üí
--   -- --       {!v ‚ààùïç i ‚ü¶ t ‚ãØ ‚¶Ö ¬µŒ± t ‚¶Ü ‚üß    by ?!}
--   -- -- k ih v t j v‚ààùïç j‚â§k ‚Üí {!!}

-- Rùïç k ih (fold v) (¬µŒ± t)     = ‚àÄ {j} ‚Üí
--                               (j<k : j < k) ‚Üí
--                               Rùïç< ih j j<k v (t ‚ãØ ‚¶Ö ¬µŒ± t ‚¶Ü)

-- ih  : (y : ‚Ñï) ‚Üí
--       y < k ‚Üí
--       {v = v‚ÇÅ : ¬µ ‚ä¢ ùïñ} {t = t‚ÇÅ : ¬µ ‚ä¢ ùï•} {j = j‚ÇÅ : ‚Ñï} ‚Üí
--       v‚ÇÅ ‚ààùïç y ‚ü¶ t‚ÇÅ ‚üß ‚Üí j‚ÇÅ ‚â§ y ‚Üí v‚ÇÅ ‚ààùïç j‚ÇÅ ‚ü¶ t‚ÇÅ ‚üß

-- Fundamental Property
‚ä¢‚Üí‚äß :
  Œì ‚ä¢ e ‚à∂ t ‚Üí
  Œì ‚äß e ‚à∂ t
‚ä¢‚Üí‚äß ‚ä¢e = {!!}

-- ‚äß‚Üísafe :
--   Œì ‚äß e ‚à∂ t ‚Üí
--   safe
-- ‚äß‚Üí‚ä¢ ‚äße = {!!}

-- -- mutual      
-- --   ùïç‚ÜíValue : e ‚ààùïç‚ü¶ t ‚üß k ‚Üí Value e
-- --   ùïç‚ÜíValue = {!!}
