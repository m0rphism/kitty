module Kitty.Experimental.Examples.STLC-Rec.LR-Safety where

open import Kitty.Experimental.Examples.STLC-Rec.Definitions hiding (_,_)
open import Kitty.Experimental.Examples.STLC-Rec.SubjectReduction

open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Data.List using (List; []; _‚à∑_)
open import Data.Nat hiding (_‚äî_)
open import Data.Nat.Induction using (<-rec; <-wellFounded)
open import Data.Nat.Properties using (‚â§-trans; ‚â§-refl; ‚â§-step)
open import Data.Product using (Œ£; _√ó_; _,_; Œ£-syntax; ‚àÉ-syntax) renaming (proj‚ÇÅ to œÄ‚ÇÅ; proj‚ÇÇ to œÄ‚ÇÇ) 
open import Data.Unit.Polymorphic
open import Function using (_$_)
open import Induction
open import Induction.WellFounded as WF using (WfRec)
open import Level using (Level; _‚äî_)
open import Relation.Binary.PropositionalEquality hiding ([_])
open import Relation.Nullary using (¬¨_)

-- Lemmas ----------------------------------------------------------------------

infixr 0 _by_
_by_ : ‚àÄ {‚Ñì} (A : Set ‚Ñì) ‚Üí A ‚Üí A
A by a = a

wk-ih : ‚àÄ {‚Ñì j k} {P : ‚Ñï ‚Üí Set ‚Ñì} ‚Üí
  j ‚â§ k ‚Üí
  WfRec _<_ P k ‚Üí  -- (‚àÄ i ‚Üí i < k ‚Üí P i) ‚Üí
  WfRec _<_ P j    -- (‚àÄ i ‚Üí i < j ‚Üí P i)
wk-ih j‚â§k ih i i<j = ih i (‚â§-trans i<j j‚â§k)

k‚à∏j‚â§k : ‚àÄ k j ‚Üí k ‚à∏ j ‚â§ k
k‚à∏j‚â§k k       zero    = ‚â§-refl
k‚à∏j‚â§k zero    (suc j) = ‚â§-refl
k‚à∏j‚â§k (suc k) (suc j) = ‚â§-trans (k‚à∏j‚â§k k j) (‚â§-step ‚â§-refl)

-- TODO: Move to library
module FixPoint-FunExt
  {‚Ñì ‚Ñì' r : Level}
  {A : Set ‚Ñì'}
  {_<_ : A ‚Üí A ‚Üí Set r} (wf : WF.WellFounded _<_)
  (P : A ‚Üí Set ‚Ñì) (f : ‚àÄ x ‚Üí WF.WfRec _<_ P x ‚Üí P x)
  where

  open import Axiom.Extensionality.Propositional renaming (Extensionality to FunExt)

  postulate fun-ext : ‚àÄ {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ} ‚Üí FunExt ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ

  open WF.FixPoint wf P f
    (Œª x IH‚â°IH‚Ä≤ ‚Üí cong (f x) $ fun-ext Œª y ‚Üí fun-ext Œª y<x ‚Üí IH‚â°IH‚Ä≤ y<x)
    public

  unfold-wfRec' : ‚àÄ {x} ‚Üí WF.All.wfRec wf ‚Ñì P f x ‚â° f x (Œª y _ ‚Üí WF.All.wfRec wf ‚Ñì P f y)
  unfold-wfRec' = unfold-wfRec

-- Formalization ---------------------------------------------------------------

Gas : Set
Gas = ‚Ñï

variable
  ‚Ñì ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ : Level
  A B C : Set ‚Ñì
  k k‚ÇÅ k‚ÇÇ k‚ÇÉ k' k‚ÇÅ' k‚ÇÇ' k‚ÇÉ' : Gas
  j j‚ÇÅ j‚ÇÇ j‚ÇÉ j' j‚ÇÅ' j‚ÇÇ' j‚ÇÉ' : Gas
  i i‚ÇÅ i‚ÇÇ i‚ÇÉ i' i‚ÇÅ' i‚ÇÇ' i‚ÇÉ' : Gas

data _‚Ü™^[_]_ : ¬µ ‚ä¢ ùïñ ‚Üí Gas ‚Üí ¬µ ‚ä¢ ùïñ ‚Üí Set where
  ‚Ü™-refl : e ‚Ü™^[ zero ] e
  ‚Ü™-step : e‚ÇÅ ‚Ü™ e‚ÇÇ ‚Üí e‚ÇÇ ‚Ü™^[ k ] e‚ÇÉ ‚Üí e‚ÇÅ ‚Ü™^[ suc k ] e‚ÇÉ

‚Ü™^-trans : e‚ÇÅ ‚Ü™^[ k ] e‚ÇÇ ‚Üí e‚ÇÇ ‚Ü™^[ k' ] e‚ÇÉ ‚Üí e‚ÇÅ ‚Ü™^[ k + k' ] e‚ÇÉ
‚Ü™^-trans ‚Ü™-refl q = q
‚Ü™^-trans (‚Ü™-step s p) q = ‚Ü™-step s (‚Ü™^-trans p q)

-- ‚Ü™^‚Üí‚Ü™* : e‚ÇÅ ‚Ü™^[ k ] e‚ÇÇ ‚Üí e‚ÇÅ ‚Ü™* e‚ÇÇ
-- ‚Ü™^‚Üí‚Ü™* p = ?

-- ‚Ü™*‚Üí‚Ü™^ : e‚ÇÅ ‚Ü™* e‚ÇÇ ‚Üí ‚àÉ[ k ] (e‚ÇÅ ‚Ü™^[ k ] e‚ÇÇ)
-- ‚Ü™*‚Üí‚Ü™^ p = ?

Irred : ¬µ ‚ä¢ ùïñ ‚Üí Set
Irred e = ‚àÄ e' ‚Üí ¬¨ (e ‚Ü™ e')

-- Recursive Definitions -------------------------------------------------------

module Rec where

  -- Type of the `_‚ààùïç_‚ü¶_‚üß` and `_‚ààùîº_‚ü¶_‚üß` relations, but without the `Gas`-parameter.
  RelTy : Set‚ÇÅ
  RelTy = [] ‚ä¢ ùïñ ‚Üí [] ‚à∂‚ä¢ ùïñ ‚Üí Set


  -- Field accessors for the Rùïç and Rùîº components of the induction hypothesis.
  Rùïç< : ‚àÄ {k} ‚Üí (‚àÄ j ‚Üí j < k ‚Üí A √ó B) ‚Üí (‚àÄ j ‚Üí j < k ‚Üí A)
  Rùïç< ih j j<k = œÄ‚ÇÅ (ih j j<k)
  Rùîº< : ‚àÄ {k} ‚Üí (‚àÄ j ‚Üí j < k ‚Üí A √ó B) ‚Üí (‚àÄ j ‚Üí j < k ‚Üí B)
  Rùîº< ih j j<k = œÄ‚ÇÇ (ih j j<k)

  Rùïç Rùîº : ‚àÄ (k : Gas) ‚Üí (‚àÄ j ‚Üí j < k ‚Üí RelTy √ó RelTy) ‚Üí RelTy
  Rùïç k ih _        (`[ p ] x) = ‚ä•
  Rùïç k ih (Œªx e)   (t‚ÇÅ ‚áí t‚ÇÇ)  = ‚àÄ {j v} ‚Üí
                              (j‚â§k : j ‚â§ k) ‚Üí
                              Rùïç j (wk-ih j‚â§k ih) v t‚ÇÅ ‚Üí
                              Rùîº j (wk-ih j‚â§k ih) (e ‚ãØ ‚¶Ö v ‚¶Ü) t‚ÇÇ
  Rùïç k ih _        (t‚ÇÅ ‚áí t‚ÇÇ)  = ‚ä•
  Rùïç k ih _        ùüò          = ‚ä•
  Rùïç k ih (fold v) (¬µŒ± t)     = ‚àÄ {j} ‚Üí
                              (j<k : j < k) ‚Üí
                              Rùïç< ih j j<k v (t ‚ãØ ‚¶Ö ¬µŒ± t ‚¶Ü)
  Rùïç k ih _        (¬µŒ± t)     = ‚ä•
  Rùîº k ih e        t          = ‚àÄ {j e'} ‚Üí
                              (j<k : j < k) ‚Üí
                              e ‚Ü™^[ j ] e' ‚Üí
                              Irred e' ‚Üí
                              Rùïç (k ‚à∏ j) (wk-ih (k‚à∏j‚â§k k j) ih) e' t

  R : ‚àÄ (k : Gas) ‚Üí
    (‚àÄ j ‚Üí j < k ‚Üí RelTy √ó RelTy) ‚Üí
    RelTy √ó RelTy
  R k ih = Rùïç k ih , Rùîº k ih

  infix 3 _‚ààùïç_‚ü¶_‚üß  _‚ààùîº_‚ü¶_‚üß  _‚ààùîæ_‚ü¶_‚üß  _‚äß_‚à∂_

  ‚ààùïçùîº : Gas ‚Üí RelTy √ó RelTy
  ‚ààùïçùîº = <-rec _ R

  _‚ààùïç_‚ü¶_‚üß _‚ààùîº_‚ü¶_‚üß : [] ‚ä¢ ùïñ ‚Üí Gas ‚Üí [] ‚à∂‚ä¢ ùïñ ‚Üí Set
  v ‚ààùïç k ‚ü¶ t ‚üß = œÄ‚ÇÅ (‚ààùïçùîº k) v t
  e ‚ààùîº k ‚ü¶ t ‚üß = œÄ‚ÇÇ (‚ààùïçùîº k) e t

  data _‚ààùîæ_‚ü¶_‚üß : ‚àÄ {¬µ‚ÇÅ} ‚Üí ¬µ‚ÇÅ ‚Üí‚Çõ [] ‚Üí Gas ‚Üí Ctx ¬µ‚ÇÅ ‚Üí Set where
    [] : id‚Çõ ‚ààùîæ k ‚ü¶ ‚àÖ ‚üß
    _‚à∑_ : {œÉ : ¬µ‚ÇÅ ‚Üí‚Çõ []} {k : Gas} {Œì : Ctx ¬µ‚ÇÅ} {v : [] ‚ä¢ ùïñ} {t : ¬µ‚ÇÅ ‚ä¢ ùï•} ‚Üí
      v        ‚ààùïç k ‚ü¶ t ‚ãØ œÉ  ‚üß ‚Üí
      œÉ        ‚ààùîæ k ‚ü¶ Œì      ‚üß ‚Üí
      (œÉ ,‚Çõ v) ‚ààùîæ k ‚ü¶ Œì ,, t ‚üß

  _‚äß_‚à∂_ : Ctx ¬µ ‚Üí ¬µ ‚ä¢ ùïñ ‚Üí ¬µ ‚à∂‚ä¢ ùïñ ‚Üí Set
  Œì ‚äß e ‚à∂ t = ‚àÄ {k œÉ} ‚Üí
    œÉ       ‚ààùîæ k ‚ü¶ Œì ‚üß ‚Üí
    (e ‚ãØ œÉ) ‚ààùîº k ‚ü¶ t ‚ãØ œÉ ‚üß

  module Unfold-ùïç-ùîº where

    open import Induction.WellFounded using (module FixPoint)
    open import Data.Nat.Induction using (<-wellFounded; <-rec)

    open FixPoint-FunExt <-wellFounded (Œª _ ‚Üí RelTy √ó RelTy) R
      renaming (unfold-wfRec to unfold-‚ààùïçùîº'-‚â°) public

    unfold-‚ààùïçùîº-‚â° : {k : Gas} ‚Üí ‚ààùïçùîº k ‚â° R k (Œª j j<k ‚Üí ‚ààùïçùîº j)
    unfold-‚ààùïçùîº-‚â° = unfold-‚ààùïçùîº'-‚â°

    unfold-‚ààùïç'-‚â° : ‚àÄ {k : Gas} ‚Üí œÄ‚ÇÅ (‚ààùïçùîº k) ‚â° œÄ‚ÇÅ (R k (Œª j j<k ‚Üí ‚ààùïçùîº j))
    unfold-‚ààùïç'-‚â° = cong œÄ‚ÇÅ unfold-‚ààùïçùîº-‚â°

    unfold-‚ààùïç-‚â° : ‚àÄ {k : Gas} {e : [] ‚ä¢ ùïñ} {t : [] ‚ä¢ ùï•} ‚Üí
      (e ‚ààùïç k ‚ü¶ t ‚üß) ‚â° Rùïç k (Œª j j<k ‚Üí ‚ààùïçùîº j) e t
    unfold-‚ààùïç-‚â° {k = k} rewrite unfold-‚ààùïç'-‚â° {k} = refl

    fold-‚ààùïç : ‚àÄ {k : Gas} {e : [] ‚ä¢ ùïñ} {t : [] ‚ä¢ ùï•} ‚Üí
      Rùïç k (Œª j j<k ‚Üí ‚ààùïçùîº j) e t ‚Üí (e ‚ààùïç k ‚ü¶ t ‚üß)
    fold-‚ààùïç p = subst (Œª x ‚Üí x) (sym unfold-‚ààùïç-‚â°) p

    unfold-‚ààùïç : ‚àÄ {k : Gas} {e : [] ‚ä¢ ùïñ} {t : [] ‚ä¢ ùï•} ‚Üí
      (e ‚ààùïç k ‚ü¶ t ‚üß) ‚Üí Rùïç k (Œª j j<k ‚Üí ‚ààùïçùîº j) e t
    unfold-‚ààùïç p = subst (Œª x ‚Üí x) unfold-‚ààùïç-‚â° p

    unfold-‚ààùîº'-‚â° : ‚àÄ {k : Gas} ‚Üí œÄ‚ÇÇ (‚ààùïçùîº k) ‚â° œÄ‚ÇÇ (R k (Œª j j<k ‚Üí ‚ààùïçùîº j))
    unfold-‚ààùîº'-‚â° = cong œÄ‚ÇÇ unfold-‚ààùïçùîº-‚â°

    unfold-‚ààùîº-‚â° : ‚àÄ {k : Gas} {e : [] ‚ä¢ ùïñ} {t : [] ‚ä¢ ùï•} ‚Üí
      (e ‚ààùîº k ‚ü¶ t ‚üß) ‚â° Rùîº k (Œª j j<k ‚Üí ‚ààùïçùîº j) e t
    -- unfold-ùîº {k = k} rewrite unfold-ùîº'-‚â° {k} = {!refl!}
    unfold-‚ààùîº-‚â° {k = k} = {!!}

    fold-‚ààùîº : ‚àÄ {k : Gas} {e : [] ‚ä¢ ùïñ} {t : [] ‚ä¢ ùï•} ‚Üí
      Rùîº k (Œª j j<k ‚Üí ‚ààùïçùîº j) e t ‚Üí (e ‚ààùîº k ‚ü¶ t ‚üß)
    fold-‚ààùîº p = subst (Œª x ‚Üí x) (sym unfold-‚ààùîº-‚â°) p

    unfold-‚ààùîº : ‚àÄ {k : Gas} {e : [] ‚ä¢ ùïñ} {t : [] ‚ä¢ ùï•} ‚Üí
      (e ‚ààùîº k ‚ü¶ t ‚üß) ‚Üí Rùîº k (Œª j j<k ‚Üí ‚ààùïçùîº j) e t
    unfold-‚ààùîº p = subst (Œª x ‚Üí x) unfold-‚ààùîº-‚â° p

  open Unfold-ùïç-ùîº public

-- --------------------------------------------------------------------------------

-- module Ind where

--   infix 3 _‚ààùïç_‚ü¶_‚üß  _‚ààùîº_‚ü¶_‚üß  _‚ààùîæ_‚ü¶_‚üß  _‚äß_‚à∂_

--   open Rec using () renaming
--     ( _‚ààùïç_‚ü¶_‚üß to _‚ààùïç_‚ü¶_‚üß·µ£
--     ; _‚ààùîº_‚ü¶_‚üß to _‚ààùîº_‚ü¶_‚üß·µ£
--     ; _‚ààùîæ_‚ü¶_‚üß to _‚ààùîæ_‚ü¶_‚üß·µ£
--     ; _‚äß_‚à∂_ to _‚äß·µ£_‚à∂_
--     )
--   mutual
--     data _‚ààùïç_‚ü¶_‚üß : ‚àÄ {¬µ} ‚Üí ¬µ ‚ä¢ ùïñ ‚Üí Gas ‚Üí ¬µ ‚à∂‚ä¢ ùïñ ‚Üí Set where
--       ùïç-‚áí : ‚àÄ {k} ‚Üí
--         (‚àÄ {j v} ‚Üí (j‚â§k : j ‚â§ k) ‚Üí
--           v           ‚ààùïç j ‚ü¶ t‚ÇÅ ‚üß·µ£ ‚Üí
--           (e ‚ãØ ‚¶Ö v ‚¶Ü) ‚ààùîº j ‚ü¶ t‚ÇÇ ‚üß) ‚Üí
--         (Œªx e) ‚ààùïç k ‚ü¶ t‚ÇÅ ‚áí t‚ÇÇ ‚üß
--       ùïç-¬µ : ‚àÄ {k} ‚Üí
--         (‚àÄ {j} (j<k : j < k) ‚Üí
--           v ‚ààùïç j ‚ü¶ t ‚ãØ ‚¶Ö ¬µŒ± t ‚¶Ü ‚üß) ‚Üí
--         (fold v) ‚ààùïç k ‚ü¶ ¬µŒ± t ‚üß

--     data _‚ààùîº_‚ü¶_‚üß : ‚àÄ {¬µ} ‚Üí ¬µ ‚ä¢ ùïñ ‚Üí Gas ‚Üí ¬µ ‚à∂‚ä¢ ùïñ ‚Üí Set where
--       ùîº : ‚àÄ {k} ‚Üí
--         (‚àÄ {j e'} ‚Üí (j<k : j < k) ‚Üí
--           e ‚Ü™^[ j ] e' ‚Üí
--           Irred e' ‚Üí
--           e' ‚ààùïç (k ‚à∏ j) ‚ü¶ t ‚üß) ‚Üí
--         e ‚ààùîº k ‚ü¶ t ‚üß

--   data _‚ààùîæ_‚ü¶_‚üß : ‚àÄ {¬µ‚ÇÅ ¬µ‚ÇÇ} ‚Üí ¬µ‚ÇÅ ‚Üí‚Çõ ¬µ‚ÇÇ ‚Üí Gas ‚Üí Ctx ¬µ‚ÇÅ ‚Üí Set where
--     [] : id‚Çõ ‚ààùîæ k ‚ü¶ ‚àÖ ‚üß
--     _‚à∑_ : {œÉ : ¬µ‚ÇÅ ‚Üí‚Çõ ¬µ‚ÇÇ} {k : Gas} {Œì : Ctx ¬µ‚ÇÅ} {v : ¬µ‚ÇÇ ‚ä¢ ùïñ} {t : ¬µ‚ÇÅ ‚ä¢ ùï•} ‚Üí
--       v        ‚ààùïç k ‚ü¶ t ‚ãØ œÉ  ‚üß ‚Üí
--       œÉ        ‚ààùîæ k ‚ü¶ Œì      ‚üß ‚Üí
--       (œÉ ,‚Çõ v) ‚ààùîæ k ‚ü¶ Œì ,, t ‚üß

--   _‚äß_‚à∂_ : Ctx ¬µ ‚Üí ¬µ ‚ä¢ ùïñ ‚Üí ¬µ ‚à∂‚ä¢ ùïñ ‚Üí Set
--   Œì ‚äß e ‚à∂ t = ‚àÄ {k œÉ} ‚Üí
--     œÉ       ‚ààùîæ k ‚ü¶ Œì ‚üß ‚Üí
--     (e ‚ãØ œÉ) ‚ààùîº k ‚ü¶ t ‚üß

-- module Rec‚ÜíInd where
--   open Ind
--   open Rec using () renaming
--     ( _‚ààùïç_‚ü¶_‚üß to _‚ààùïç_‚ü¶_‚üß·µ£
--     ; _‚ààùîº_‚ü¶_‚üß to _‚ààùîº_‚ü¶_‚üß·µ£
--     ; _‚ààùîæ_‚ü¶_‚üß to _‚ààùîæ_‚ü¶_‚üß·µ£
--     ; _‚äß_‚à∂_ to _‚äß·µ£_‚à∂_
--     )

--   ùïç·µ£‚Üíùïç·µ¢ : e ‚ààùïç k ‚ü¶ t ‚üß·µ£ ‚Üí e ‚ààùïç k ‚ü¶ t ‚üß
--   ùïç·µ£‚Üíùïç·µ¢ {¬µ} {Œªx e}   {k} {t‚ÇÅ ‚áí t‚ÇÇ} e‚ààùïç = {!ùïç-‚áí ?!}
--   ùïç·µ£‚Üíùïç·µ¢ {¬µ} {fold e} {k} {¬µŒ± t}    e‚ààùïç = {!!}


open Rec

--------------------------------------------------------------------------------

Monotonicity-ùïç : Gas ‚Üí Set
Monotonicity-ùïç k = (v : [] ‚ä¢ ùïñ) (t : [] ‚ä¢ ùï•) (j : ‚Ñï) ‚Üí v ‚ààùïç k ‚ü¶ t ‚üß ‚Üí j < k ‚Üí v ‚ààùïç j ‚ü¶ t ‚üß

Monotonicity-ùîº : Gas ‚Üí Set
Monotonicity-ùîº k = (e : [] ‚ä¢ ùïñ) (t : [] ‚ä¢ ùï•) (j : ‚Ñï) ‚Üí e ‚ààùîº k ‚ü¶ t ‚üß ‚Üí j < k ‚Üí e ‚ààùîº j ‚ü¶ t ‚üß

Monotonicity : Gas ‚Üí Set
Monotonicity k = Monotonicity-ùïç k √ó Monotonicity-ùîº k

Monotonicity‚â§-ùïç : Gas ‚Üí Set
Monotonicity‚â§-ùïç k = (v : [] ‚ä¢ ùïñ) (t : [] ‚ä¢ ùï•) (j : ‚Ñï) ‚Üí v ‚ààùïç k ‚ü¶ t ‚üß ‚Üí j ‚â§ k ‚Üí v ‚ààùïç j ‚ü¶ t ‚üß

Monotonicity‚â§-ùîº : Gas ‚Üí Set
Monotonicity‚â§-ùîº k = (e : [] ‚ä¢ ùïñ) (t : [] ‚ä¢ ùï•) (j : ‚Ñï) ‚Üí e ‚ààùîº k ‚ü¶ t ‚üß ‚Üí j ‚â§ k ‚Üí e ‚ààùîº j ‚ü¶ t ‚üß

open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)

‚â§‚Üí<‚à®‚â° : ‚àÄ {x y} ‚Üí x ‚â§ y ‚Üí x ‚â° y ‚äé x < y
‚â§‚Üí<‚à®‚â° {.zero} {zero} z‚â§n = inj‚ÇÅ refl
‚â§‚Üí<‚à®‚â° {.zero} {suc y} z‚â§n = inj‚ÇÇ (s‚â§s z‚â§n)
‚â§‚Üí<‚à®‚â° {suc x} {suc y} (s‚â§s x‚â§y) with ‚â§‚Üí<‚à®‚â° x‚â§y
... | inj‚ÇÅ x‚â°y = inj‚ÇÅ (cong suc x‚â°y)
... | inj‚ÇÇ x<y = inj‚ÇÇ (s‚â§s x<y)

mono-<‚Üí‚â§' : (P : ‚Ñï ‚Üí Set ‚Ñì) ‚Üí (‚àÄ k j ‚Üí P k ‚Üí j < k ‚Üí P j) ‚Üí (‚àÄ k j ‚Üí P k ‚Üí j ‚â§ k ‚Üí P j)
mono-<‚Üí‚â§' P mono-< k j Pk j‚â§k with ‚â§‚Üí<‚à®‚â° j‚â§k
... | inj‚ÇÅ j‚â°k = subst P (sym j‚â°k) Pk
... | inj‚ÇÇ j<k = mono-< k j Pk j<k

mono-<‚Üí‚â§-ùïç : ‚àÄ {k} ‚Üí Monotonicity-ùïç k ‚Üí Monotonicity‚â§-ùïç k
mono-<‚Üí‚â§-ùïç {k} mono-< e t j e‚ààùïçk‚ü¶t‚üß j‚â§k with ‚â§‚Üí<‚à®‚â° j‚â§k
... | inj‚ÇÅ refl = e‚ààùïçk‚ü¶t‚üß
... | inj‚ÇÇ j<k = mono-< e t j e‚ààùïçk‚ü¶t‚üß j<k

mono-<‚Üí‚â§-ùîº : ‚àÄ {k} ‚Üí Monotonicity-ùîº k ‚Üí Monotonicity‚â§-ùîº k
mono-<‚Üí‚â§-ùîº {k} mono-< e t j e‚ààùîºk‚ü¶t‚üß j‚â§k with ‚â§‚Üí<‚à®‚â° j‚â§k
... | inj‚ÇÅ refl = e‚ààùîºk‚ü¶t‚üß
... | inj‚ÇÇ j<k = mono-< e t j e‚ààùîºk‚ü¶t‚üß j<k

<‚Üí‚â§ : ‚àÄ {x y} ‚Üí x < y ‚Üí x ‚â§ y
<‚Üí‚â§ = {!!}

MM : ‚àÄ k ‚Üí (‚àÄ j ‚Üí j < k ‚Üí Monotonicity j) ‚Üí Monotonicity k
MM k ih = MM-ùïç k ih , MM-ùîº k ih
  where

  MM-ùïç : ‚àÄ k ‚Üí (‚àÄ j ‚Üí j < k ‚Üí Monotonicity j) ‚Üí Monotonicity-ùïç k
  MM-ùïç k ih (Œªx e)   (t‚ÇÅ ‚áí t‚ÇÇ) j Œªxe‚ààùïçk[t‚ÇÅ‚áít‚ÇÇ] j<k =
    (Œªx e) ‚ààùïç j ‚ü¶ t‚ÇÅ ‚áí t‚ÇÇ ‚üß
      by fold-‚ààùïç {e = Œªx e} {t = t‚ÇÅ ‚áí t‚ÇÇ} (
    (‚àÄ {i v} ‚Üí (i‚â§j : i ‚â§ j) ‚Üí Rùïç i (Œª j j<k ‚Üí ‚ààùïçùîº j) v t‚ÇÅ ‚Üí Rùîº i (Œª j j<k ‚Üí ‚ààùïçùîº j) (e ‚ãØ ‚¶Ö v ‚¶Ü) t‚ÇÇ)
      by Œª {i} {v} i‚â§j Rùïç-v ‚Üí
    Rùîº i (Œª j j<k ‚Üí ‚ààùïçùîº j) (e ‚ãØ ‚¶Ö v ‚¶Ü) t‚ÇÇ
      -- by
      --   {! MM-ùïç k ih!}
      --   {! (Œªxe‚ààùïçk[t‚ÇÅ‚áít‚ÇÇ] {i} {!i<k!} (‚â§-trans i<j j‚â§k))!}
      by unfold-‚ààùîº (
    e ‚ãØ ‚¶Ö v ‚¶Ü ‚ààùîº i ‚ü¶ t‚ÇÇ ‚üß
      by let Rùîº-j-e‚ãØv-t‚ÇÇ = Rùîº j (wk-ih (<‚Üí‚â§ j<k) (Œª j j<k ‚Üí ‚ààùïçùîº j)) (e ‚ãØ ‚¶Ö v ‚¶Ü) t‚ÇÇ by {! Œªxe‚ààùïçk[t‚ÇÅ‚áít‚ÇÇ] {j} (<‚Üí‚â§ j<k) ? !} in
         let Rùîº-j-e‚ãØv-t‚ÇÇ' = Rùîº j (Œª j j<k ‚Üí ‚ààùïçùîº j) (e ‚ãØ ‚¶Ö v ‚¶Ü) t‚ÇÇ by {! Œªxe‚ààùïçk[t‚ÇÅ‚áít‚ÇÇ] {j} (<‚Üí‚â§ j<k) ? !} in
         let [e‚ãØv]‚ààùîºj‚ü¶t‚ÇÇ‚üß = e ‚ãØ ‚¶Ö v ‚¶Ü ‚ààùîº j ‚ü¶ t‚ÇÇ ‚üß by fold-‚ààùîº {!Œªxe‚ààùïçk[t‚ÇÅ‚áít‚ÇÇ] {j} {!j‚â§k!} ?!} in
         let [e‚ãØv]‚ààùîºj‚ü¶t‚ÇÇ‚üß' = e ‚ãØ ‚¶Ö v ‚¶Ü ‚ààùîº j ‚ü¶ t‚ÇÇ ‚üß by {!Œªxe‚ààùïçk[t‚ÇÅ‚áít‚ÇÇ] {j} {!j‚â§k!} ?!} in
         -- let [e‚ãØv]‚ààùîºj‚ü¶t‚ÇÇ‚üß = e ‚ãØ ‚¶Ö v ‚¶Ü ‚ààùîº j ‚ü¶ t‚ÇÇ ‚üß by {!!} in
         mono-<‚Üí‚â§-ùîº (œÄ‚ÇÇ (ih j j<k)) (e ‚ãØ ‚¶Ö v ‚¶Ü) t‚ÇÇ i [e‚ãØv]‚ààùîºj‚ü¶t‚ÇÇ‚üß i‚â§j
         -- œÄ‚ÇÇ (ih j j<k) (e ‚ãØ ‚¶Ö v ‚¶Ü) t‚ÇÇ i (e ‚ãØ ‚¶Ö v ‚¶Ü ‚ààùîº j ‚ü¶ t‚ÇÇ ‚üß by {!!}) {!i<j!}
      -- by {!MM-ùîº k ih (e ‚ãØ ‚¶Ö v ‚¶Ü) t‚ÇÇ i!}
      -- by {!Œªxe‚ààùïçk[t‚ÇÅ‚áít‚ÇÇ] {i} {!i<k!} ?!}
    )
      -- by Œª {i} {v} i‚â§j Rùïç-v {i'} {e'} i'<i ‚Üí {!!} , (Œª irred-e' ‚Üí {!ih (i ‚à∏ i') _ e' t‚ÇÇ !})
    )
  MM-ùïç k ih (fold v) (¬µŒ± t)    j v‚ààV j‚â§k =
    fold v ‚ààùïç j ‚ü¶ ¬µŒ± t ‚üß          by
    fold v ‚ààùïç j ‚ü¶ ¬µŒ± t ‚üß          by {!!}

  -- Rùïç k ih (Œªx e)   (t‚ÇÅ ‚áí t‚ÇÇ)  = ‚àÄ {j v} ‚Üí
  --                               (j‚â§k : j ‚â§ k) ‚Üí
  --                               Rùïç j (wk-ih j‚â§k ih) v t‚ÇÅ ‚Üí
  --                               Rùîº j (wk-ih j‚â§k ih) (e ‚ãØ ‚¶Ö v ‚¶Ü) t‚ÇÇ

  MM-ùîº : ‚àÄ k ‚Üí (‚àÄ j ‚Üí j < k ‚Üí Monotonicity j) ‚Üí Monotonicity-ùîº k
  MM-ùîº k ih e t j e‚ààk[t] j‚â§k =
    e ‚ààùîº j ‚ü¶ t ‚üß
      by fold-‚ààùîº (
    (‚àÄ {i} {e'} ‚Üí i < j ‚Üí e ‚Ü™^[ i ] e' ‚Üí Irred e' ‚Üí Rùïç (j ‚à∏ i) (wk-ih (k‚à∏j‚â§k j i) (Œª j' j'<k ‚Üí ‚ààùïçùîº j')) e' t)
      by Œª {i} {e'} i<j e‚Ü™[i]e' irred-e' ‚Üí
    Rùïç (j ‚à∏ i) (wk-ih (k‚à∏j‚â§k j i) (Œª j' j'<k ‚Üí ‚ààùïçùîº j')) e' t
      by unfold-‚ààùïç (
    e' ‚ààùïç j ‚à∏ i ‚ü¶ t ‚üß
      by
        let i<k = ‚â§-trans i<j {!j‚â§k!} in
        let Rùïç[k-i]e' = e‚ààk[t] {i} {e'} i<k e‚Ü™[i]e' irred-e' in
        -- let e'‚ààùïçk‚à∏i[t] = Rùïç[k-i]e' in
        -- let e'‚ààùïçj‚à∏i[t] = œÄ‚ÇÅ (ih (k ‚à∏ i) {!!}) e' t (j ‚à∏ i) {!!} {!!} in
        let e'‚ààùïçj‚à∏i[t] = œÄ‚ÇÅ (ih i i<k) e' t (j ‚à∏ i) {!!} {!!} in
        {!fold-‚ààùïç Rùïç[k-i]e'!}
    )
    )

monotonicity : 
  ‚àÄ k ‚Üí Monotonicity k
monotonicity = <-rec _ MM

monotonicity-ùïç : 
  ‚àÄ k (v : [] ‚ä¢ ùïñ) (t : [] ‚ä¢ ùï•) j ‚Üí
  v ‚ààùïç k ‚ü¶ t ‚üß ‚Üí
  j ‚â§ k ‚Üí
  v ‚ààùïç j ‚ü¶ t ‚üß
-- monotonicity-ùïç = {!!}
monotonicity-ùïç k (Œªx e)   (t‚ÇÅ ‚áí t‚ÇÇ) j Œªxe‚ààùïçk‚ü¶t‚ÇÅ‚áít‚ÇÇ‚üß   j‚â§k {i} {v} i‚â§j v‚ààùïçi‚ü¶t‚ÇÅ‚üß {h} {e'} h<i e‚ãØv‚Ü™^[h]e' irred-e' =
  {!!}
  -- let i‚â§k = i ‚â§ k by {!!} in
  -- -- {!Œªxe‚ààùïçk‚ü¶t‚ÇÅ‚áít‚ÇÇ‚üß {i} i‚â§k {!v‚ààùïçi‚ü¶t‚ÇÅ‚üß!} h<i e‚ãØv‚Ü™^[h]e' irred-e'!}
  -- Rùïç (i ‚à∏ h)
  --     (wk-ih (k‚à∏j‚â§k i h)
  --      (wk-ih i‚â§j
  --       -- (WF.All.wfRecBuilder <-wellFounded (Level.suc Level.zero)
  --       --  (Œª _ ‚Üí RelTy √ó RelTy) (Œª k‚ÇÅ ih ‚Üí Rùïç k‚ÇÅ ih , Rùîº k‚ÇÅ ih) j)
  --       (Œª i _ ‚Üí ‚ààùïçùîº i)
  --       ))
  --     e' t‚ÇÇ
  -- by
  -- {!fold-‚ààùîº (Œªxe‚ààùïçk‚ü¶t‚ÇÅ‚áít‚ÇÇ‚üß {i} i‚â§k {!v‚ààùïçi‚ü¶t‚ÇÅ‚üß!})!}
 
-- monotonicity-ùïç k (Œªx e)   (t‚ÇÅ ‚áí t‚ÇÇ) j Œªxe‚ààùïçk‚ü¶t‚ÇÅ‚áít‚ÇÇ‚üß   j‚â§k {i} {v} i‚â§j v‚ààùïçi‚ü¶t‚ÇÅ‚üß =
--   -- (e ‚ãØ ‚¶Ö v ‚¶Ü) ‚ààùîº i ‚ü¶ t‚ÇÇ ‚üß
--   -- let e‚ãØv‚ààùîºi‚ü¶t‚ÇÇ‚üß = (e ‚ãØ ‚¶Ö v ‚¶Ü) ‚ààùîº i ‚ü¶ t‚ÇÇ ‚üß by {!Œªxe‚ààùïçk‚ü¶t‚ÇÅ‚áít‚ÇÇ‚üß {i} {!i‚â§k!} {!v‚ààùïçi‚ü¶t‚ÇÅ‚üß!}!} in
--   let e‚ãØv‚ààùîºi‚ü¶t‚ÇÇ‚üß = (e ‚ãØ ‚¶Ö v ‚¶Ü) ‚ààùîº i ‚ü¶ t‚ÇÇ ‚üß by {!Œªxe‚ààùïçk‚ü¶t‚ÇÅ‚áít‚ÇÇ‚üß {i} {!i‚â§k!} {!v‚ààùïçi‚ü¶t‚ÇÅ‚üß!}!} in
--   {!Œªxe‚ààùïçk‚ü¶t‚ÇÅ‚áít‚ÇÇ‚üß {i} {!i‚â§k!} {!v‚ààùïçi‚ü¶t‚ÇÅ‚üß!}!}
monotonicity-ùïç k (fold v) (¬µŒ± t)    j foldv‚ààùïçk‚ü¶¬µŒ±t‚üß j‚â§k = {!!}

-- RecTy : Gas ‚Üí Set
-- RecTy k = (v : [] ‚ä¢ ùïñ) (t : [] ‚ä¢ ùï•) (j : ‚Ñï) ‚Üí v ‚ààùïç k ‚ü¶ t ‚üß ‚Üí j ‚â§ k ‚Üí v ‚ààùïç j ‚ü¶ t ‚üß

-- MM : ‚àÄ k ‚Üí (‚àÄ j ‚Üí j < k ‚Üí RecTy j) ‚Üí RecTy k
-- -- MM : ‚àÄ k ‚Üí WfRec _<_ RecTy k ‚Üí RecTy k
-- MM k ih (Œªx e)   (t‚ÇÅ ‚áí t‚ÇÇ) j v‚ààV j‚â§k =
--   (Œªx e) ‚ààùïç j ‚ü¶ t‚ÇÅ ‚áí t‚ÇÇ ‚üß
--     by fold-‚ààùïç {e = Œªx e} {t = t‚ÇÅ ‚áí t‚ÇÇ} (
--   (‚àÄ {i v} ‚Üí (i‚â§j : i ‚â§ j) ‚Üí Rùïç i (Œª j j<k ‚Üí ‚ààùïçùîº j) v t‚ÇÅ ‚Üí Rùîº i (Œª j j<k ‚Üí ‚ààùïçùîº j) (e ‚ãØ ‚¶Ö v ‚¶Ü) t‚ÇÇ)
--     -- by Œª {i} {v} i‚â§j Rùïç-v ‚Üí {!!}
--     by Œª {i} {v} i‚â§j Rùïç-v {i'} {e'} i'<i ‚Üí {!!} , (Œª irred-e' ‚Üí {!ih (i ‚à∏ i') _ e' t‚ÇÇ !})
--   )
-- MM k ih (fold v) (¬µŒ± t)    j v‚ààV j‚â§k =
--   fold v ‚ààùïç j ‚ü¶ ¬µŒ± t ‚üß          by
--   fold v ‚ààùïç j ‚ü¶ ¬µŒ± t ‚üß          by {!!}

-- -- Rùïç k ih (Œªx e)   (t‚ÇÅ ‚áí t‚ÇÇ)  = ‚àÄ {j v} ‚Üí
-- --                               (j‚â§k : j ‚â§ k) ‚Üí
-- --                               Rùïç j (wk-ih j‚â§k ih) v t‚ÇÅ ‚Üí
-- --                               Rùîº j (wk-ih j‚â§k ih) (e ‚ãØ ‚¶Ö v ‚¶Ü) t‚ÇÇ

-- monotonicity : 
--   ‚àÄ k (v : [] ‚ä¢ ùïñ) (t : [] ‚ä¢ ùï•) j ‚Üí
--   v ‚ààùïç k ‚ü¶ t ‚üß ‚Üí
--   j ‚â§ k ‚Üí
--   v ‚ààùïç j ‚ü¶ t ‚üß
-- monotonicity = <-rec _ MM

-- Fundamental Property
‚ä¢‚Üí‚äß :
  Œì ‚ä¢ e ‚à∂ t ‚Üí
  Œì ‚äß e ‚à∂ t
‚ä¢‚Üí‚äß ‚ä¢e = {!!}

-- ‚äß‚Üísafe :
--   Œì ‚äß e ‚à∂ t ‚Üí
--   safe
-- ‚äß‚Üí‚ä¢ ‚äße = {!!}

-- -- mutual      
-- --   ùïç‚ÜíValue : e ‚ààùïç‚ü¶ t ‚üß k ‚Üí Value e
-- --   ùïç‚ÜíValue = {!!}
